package main

// This file is updated via the output from https://sippy.ci.openshift.org/api/canary?release=$VERSION
var (
	minimal = map[string]struct{}{
		"user.openshift.io~v1~Group.Kubernetes resource CRUD operations user.openshift.io~v1~Group search view displays created resource instance":           {},
		"user.openshift.io~v1~Group.Kubernetes resource CRUD operations user.openshift.io~v1~Group edits the resource instance":                              {},
		"user.openshift.io~v1~Group.Kubernetes resource CRUD operations user.openshift.io~v1~Group displays detail view for newly created resource instance": {},
		"user.openshift.io~v1~Group.Kubernetes resource CRUD operations user.openshift.io~v1~Group displays a list view for the resource":                    {},
		"user.openshift.io~v1~Group.Kubernetes resource CRUD operations user.openshift.io~v1~Group deletes the resource instance":                            {},
		"user.openshift.io~v1~Group.Kubernetes resource CRUD operations user.openshift.io~v1~Group creates the resource instance":                            {},
		"upgrade": {},
		"storageClass related feature.Setting mountOptions for StorageClass (outline example : | vsphere | thin |)":                                                                                      {},
		"storageClass related feature.Setting mountOptions for StorageClass (outline example : | gce | standard |)":                                                                                      {},
		"storageClass related feature.Setting mountOptions for StorageClass (outline example : | ebs | gp2 |)":                                                                                           {},
		"storageClass related feature.PVC with storage class will not provision io1 pv with wrong parameters for aws ebs volume":                                                                         {},
		"storage security check.secret volume security check":                                                                                                                                            {},
		"storage security check.[origin_infra_20] volume security testing (outline example : | gcePersistentDisk | pdName | gce |)":                                                                      {},
		"storage security check.[origin_infra_20] volume security testing (outline example : | cinder | volumeID | cinder |)":                                                                            {},
		"storage security check.[origin_infra_20] volume security testing (outline example : | awsElasticBlockStore | volumeID | ebs |)":                                                                 {},
		"storage security check.Run pod with specific user/group by using securityContext (outline example : | runAsUser |)":                                                                             {},
		"storage security check.Run pod with specific user/group by using securityContext (outline example : | fsGroup |)":                                                                               {},
		"storage security check.Run pod with specific SELinux by using seLinuxOptions in securityContext":                                                                                                {},
		"stibuild.feature.Trigger s2i/docker/custom build using additional imagestream (outline example : | ocp12041-s2i.json |)":                                                                        {},
		"stibuild.feature.Mount source secret and configmap to builder container- sourcestrategy":                                                                                                        {},
		"stibuild.feature.Image source extraction w/ symlink should success when running a build":                                                                                                        {},
		"stibuild.feature.Creates a new application based on the source code in a private remote repository":                                                                                             {},
		"stibuild.feature.Create a build configuration based on a private remote git repository":                                                                                                         {},
		"statefulsets.Add storage is applicable for all workloads statefulsets create a statefulsets resource and adds storage to it":                                                                    {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotContent.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotContent search view displays created resource instance":           {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotContent.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotContent edits the resource instance":                              {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotContent.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotContent displays detail view for newly created resource instance": {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotContent.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotContent displays a list view for the resource":                    {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotContent.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotContent deletes the resource instance":                            {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotContent.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotContent creates the resource instance":                            {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotClass.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotClass search view displays created resource instance":               {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotClass.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotClass edits the resource instance":                                  {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotClass.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotClass displays detail view for newly created resource instance":     {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotClass.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotClass displays a list view for the resource":                        {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotClass.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotClass deletes the resource instance":                                {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshotClass.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshotClass creates the resource instance":                                {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshot.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshot search view displays created resource instance":                         {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshot.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshot edits the resource instance":                                            {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshot.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshot displays detail view for newly created resource instance":               {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshot.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshot displays a list view for the resource":                                  {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshot.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshot deletes the resource instance":                                          {},
		"snapshot.storage.k8s.io~v1~VolumeSnapshot.Kubernetes resource CRUD operations snapshot.storage.k8s.io~v1~VolumeSnapshot creates the resource instance":                                          {},
		"secrets related scenarios.Consume secret via volume plugin with multiple volumes":                                                                                                               {},
		"scaling related scenarios.[openshift-sme]When rolling deployments the pod should shutdown gracefully":                                                                                           {},
		"resouces related scenarios.Return description of resources with cli describe":                                                                                                                   {},
		"replicationcontrollers.Add storage is applicable for all workloads replicationcontrollers create a replicationcontrollers resource and adds storage to it":                                      {},
		"replicasets.Add storage is applicable for all workloads replicasets create a replicasets resource and adds storage to it":                                                                       {},
		"release-openshift-origin-installer-e2e-gcp-shared-vpc-4.10.Pod":                                                                                                                                 {},
		"release-openshift-origin-installer-e2e-azure-shared-vpc-4.10.Pod":                                                                                                                               {},
		"release-openshift-origin-installer-e2e-aws-upgrade-4.7-to-4.8-to-4.9-to-4.10-ci.Pod":                                                                                                            {},
		"release-openshift-origin-installer-e2e-aws-shared-vpc-4.10.Pod":                                                                                                                                 {},
		"release-openshift-origin-installer-e2e-aws-shared-vpc-4.10.Overall":                                                                                                                             {},
		"release-openshift-origin-installer-e2e-aws-disruptive-4.10.Pod":                                                                                                                                 {},
		"release-openshift-ocp-osd-gcp-nightly-4.10.Pod":                                                                                                                                                 {},
		"release-openshift-ocp-osd-aws-nightly-4.10.Pod":                                                                                                                                                 {},
		"release-openshift-ocp-installer-e2e-metal-serial-4.10.Pod":                                                                                                                                      {},
		"release-openshift-ocp-installer-e2e-metal-compact-4.10.Pod":                                                                                                                                     {},
		"release-openshift-ocp-installer-e2e-metal-4.10.Pod":                                                                                                                                             {},
		"release-openshift-ocp-installer-e2e-gcp-serial-4.10.Pod":                                                                                                                                        {},
		"release-openshift-ocp-installer-e2e-azure-serial-4.10.Pod":                                                                                                                                      {},
		"release-openshift-ocp-installer-e2e-aws-upi-4.10.Pod":                                                                                                                                           {},
		"release-openshift-ocp-installer-e2e-aws-mirrors-4.10.Pod":                                                                                                                                       {},
		"release-openshift-ocp-installer-e2e-aws-csi-4.10.Pod":                                                                                                                                           {},
		"promote-release-openshift-machine-os-content-e2e-aws-4.10.Pod":                                                                                                                                  {},
		"promote-release-openshift-machine-os-content-e2e-aws-4.10-s390x.Pod":                                                                                                                            {},
		"promote-release-openshift-machine-os-content-e2e-aws-4.10-ppc64le.Pod":                                                                                                                          {},
		"projects related features via cli.User can get node selector from a project":                                                                                                                    {},
		"projects related features via cli.Could remove user and group from the current project":                                                                                                         {},
		"periodic-ci-openshift-verification-tests-master-ocp-4.10-e2e-vsphere-cucushift-ipi.Pod":                                                                                                         {},
		"periodic-ci-openshift-verification-tests-master-ocp-4.10-e2e-gcp-cucushift-upi.Pod":                                                                                                             {},
		"periodic-ci-openshift-verification-tests-master-ocp-4.10-e2e-gcp-cucushift-upi.Overall":                                                                                                         {},
		"periodic-ci-openshift-verification-tests-master-ocp-4.10-e2e-gcp-cucushift-ipi.Pod":                                                                                                             {},
		"periodic-ci-openshift-verification-tests-master-ocp-4.10-e2e-aws-cucushift-ipi.Pod":                                                                                                             {},
		"periodic-ci-openshift-release-master-nightly-4.10-upgrade-from-stable-4.9-e2e-metal-ipi-upgrade.Pod":                                                                                            {},
		"periodic-ci-openshift-release-master-nightly-4.10-upgrade-from-stable-4.9-e2e-aws-upgrade.Pod":                                                                                                  {},
		"periodic-ci-openshift-release-master-nightly-4.10-upgrade-from-stable-4.8-e2e-aws-upgrade-paused.Pod":                                                                                           {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-vsphere.Pod":                                                                                                                              {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-vsphere-upi.Pod":                                                                                                                          {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-vsphere-upi-serial.Pod":                                                                                                                   {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-vsphere-techpreview.Pod":                                                                                                                  {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-vsphere-techpreview-serial.Pod":                                                                                                           {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-vsphere-serial.Pod":                                                                                                                       {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-vsphere-ovn.Pod":                                                                                                                          {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-ovirt.Pod":                                                                                                                                {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-ovirt-ovn.Pod":                                                                                                                            {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-openstack-proxy.Pod":                                                                                                                      {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-openstack-fips.Pod":                                                                                                                       {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-openstack-fips.Overall":                                                                                                                   {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-openstack-az.Pod":                                                                                                                         {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-single-node-live-iso.Pod":                                                                                                           {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-ipi.Pod":                                                                                                                            {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-ipi-virtualmedia.Pod":                                                                                                               {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-ipi-upgrade.Pod":                                                                                                                    {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-ipi-serial-ipv4.Pod":                                                                                                                {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-ipi-ovn-ipv6.Pod":                                                                                                                   {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-ipi-ovn-dualstack.Pod":                                                                                                              {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-ipi-ovn-dualstack-local-gateway.Pod":                                                                                                {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-ipi-compact.Pod":                                                                                                                    {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-ipi-compact.Overall":                                                                                                                {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-assisted.Pod":                                                                                                                       {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-metal-assisted-ipv6.Pod":                                                                                                                  {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-gcp.Pod":                                                                                                                                  {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-gcp-rt.Pod":                                                                                                                               {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-gcp-libvirt-cert-rotation.Pod":                                                                                                            {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-gcp-fips.Pod":                                                                                                                             {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-gcp-fips-serial.Pod":                                                                                                                      {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-azure.Pod":                                                                                                                                {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-azure-upgrade-cnv.Pod":                                                                                                                    {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-azure-fips.Pod":                                                                                                                           {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-azure-fips-serial.Pod":                                                                                                                    {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-azure-deploy-cnv.Pod":                                                                                                                     {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws.Pod":                                                                                                                                  {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-workers-rhel8.Pod":                                                                                                                    {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-workers-rhel7.Pod":                                                                                                                    {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-upgrade.Pod":                                                                                                                          {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-single-node.Pod":                                                                                                                      {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-single-node-serial.Pod":                                                                                                               {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-serial.Pod":                                                                                                                           {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-proxy.Pod":                                                                                                                            {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-ovn-local-gateway.Pod":                                                                                                                {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-ovn-local-gateway.Overall":                                                                                                            {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-fips.Pod":                                                                                                                             {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-fips-serial.Pod":                                                                                                                      {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-fips-serial.Overall":                                                                                                                  {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-cgroupsv2.Pod":                                                                                                                        {},
		"periodic-ci-openshift-release-master-nightly-4.10-e2e-aws-canary.Pod":                                                                                                                           {},
		"periodic-ci-openshift-release-master-nightly-4.10-console-aws.Pod":                                                                                                                              {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-from-stable-4.8-e2e-aws-upgrade.Pod":                                                                                       {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-vsphere-upgrade.Pod":                                                                                                   {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-ovirt-upgrade.Pod":                                                                                                     {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-openstack-upgrade.Pod":                                                                                                 {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-gcp-upgrade.Pod":                                                                                                       {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-gcp-ovn-upgrade.Pod":                                                                                                   {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-azure-upgrade.Pod":                                                                                                     {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-azure-ovn-upgrade.Pod":                                                                                                 {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-aws-uwm.Pod":                                                                                                           {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-aws-upgrade.Pod":                                                                                                       {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-aws-upgrade-rollback.Pod":                                                                                              {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-aws-ovn-upgrade.Pod":                                                                                                   {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-aws-ovn-upgrade-rollback.Pod":                                                                                          {},
		"periodic-ci-openshift-release-master-ci-4.10-upgrade-from-stable-4.9-e2e-aws-compact-upgrade.Pod":                                                                                               {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-openstack-techpreview-serial.Pod":                                                                                                              {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-openstack-techpreview-parallel.Pod":                                                                                                            {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-openstack-serial.Pod":                                                                                                                          {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-openstack-parallel.Pod":                                                                                                                        {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-openstack-ovn.Pod":                                                                                                                             {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-openstack-kuryr.Pod":                                                                                                                           {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-network-migration.Pod":                                                                                                                         {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-network-migration-rollback.Pod":                                                                                                                {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-gcp.Pod":                                                                                                                                       {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-gcp-upgrade.Pod":                                                                                                                               {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-gcp-techpreview.Pod":                                                                                                                           {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-gcp-techpreview-serial.Pod":                                                                                                                    {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-gcp-serial.Pod":                                                                                                                                {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-gcp-ovn.Pod":                                                                                                                                   {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-gcp-compact.Pod":                                                                                                                               {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-gcp-compact-upgrade.Pod":                                                                                                                       {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-gcp-compact-serial.Pod":                                                                                                                        {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure.Pod":                                                                                                                                     {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-upgrade.Pod":                                                                                                                             {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-upgrade-single-node.Pod":                                                                                                                 {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-techpreview.Pod":                                                                                                                         {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-techpreview-serial.Pod":                                                                                                                  {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-serial.Pod":                                                                                                                              {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-ovn.Pod":                                                                                                                                 {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-ovn-upgrade.Pod":                                                                                                                         {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-compact.Pod":                                                                                                                             {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-compact-upgrade.Pod":                                                                                                                     {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-compact-serial.Pod":                                                                                                                      {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-azure-cilium.Pod":                                                                                                                              {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws.Pod":                                                                                                                                       {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-upgrade.Pod":                                                                                                                               {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-upgrade-single-node.Pod":                                                                                                                   {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-upgrade-rollback.Pod":                                                                                                                      {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-techpreview.Pod":                                                                                                                           {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-techpreview-serial.Pod":                                                                                                                    {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-serial.Pod":                                                                                                                                {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-sdn-multitenant.Pod":                                                                                                                       {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-ovn.Pod":                                                                                                                                   {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-ovn-upgrade.Pod":                                                                                                                           {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-ovn-network-stress.Pod":                                                                                                                    {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-network-stress.Pod":                                                                                                                        {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-hypershift.Pod":                                                                                                                            {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-compact.Pod":                                                                                                                               {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-compact-upgrade.Pod":                                                                                                                       {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-compact-serial.Pod":                                                                                                                        {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-cgroupsv2.Pod":                                                                                                                             {},
		"periodic-ci-openshift-release-master-ci-4.10-e2e-aws-calico.Pod":                                                                                                                                {},
		"periodic-ci-openshift-multiarch-master-nightly-4.10-ocp-installer-remote-libvirt-s390x.Pod":                                                                                                     {},
		"periodic-ci-openshift-multiarch-master-nightly-4.10-ocp-installer-remote-libvirt-ppc64le.Pod":                                                                                                   {},
		"periodic-ci-openshift-multiarch-master-nightly-4.10-ocp-e2e-aws-arm64.Pod":                                                                                                                      {},
		"operator.Tag the image machine-os-content into the image stream tag stable:machine-os-content":                                                                                                  {},
		"operator.Run template e2e-gcp - e2e-gcp container setup":                                                                                                                                        {},
		"operator.Run template e2e-azure - e2e-azure container setup":                                                                                                                                    {},
		"operator.Run template e2e-aws-upgrade - e2e-aws-upgrade container setup":                                                                                                                        {},
		"operator.Run template e2e-aws-disruptive - e2e-aws-disruptive container setup":                                                                                                                  {},
		"operator.Run template e2e-aws - e2e-aws container setup":                                                                                                                                        {},
		"operator.Run multi-stage test e2e-vsphere-upi-serial - e2e-vsphere-upi-serial-upi-install-vsphere container test":                                                                               {},
		"operator.Run multi-stage test e2e-vsphere-upi - e2e-vsphere-upi-upi-install-vsphere container test":                                                                                             {},
		"operator.Run multi-stage test e2e-vsphere-cucushift-ipi - e2e-vsphere-cucushift-ipi-ipi-install-install container test":                                                                         {},
		"operator.Run multi-stage test e2e-vsphere - e2e-vsphere-ipi-install-vsphere-registry container test":                                                                                            {},
		"operator.Run multi-stage test e2e-ovirt-ovn - e2e-ovirt-ovn-ipi-install-install container test":                                                                                                 {},
		"operator.Run multi-stage test e2e-openstack-upgrade - e2e-openstack-upgrade-ipi-install-rbac container test":                                                                                    {},
		"operator.Run multi-stage test e2e-openstack-upgrade - e2e-openstack-upgrade-ipi-install-monitoringpvc-annotate container test":                                                                  {},
		"operator.Run multi-stage test e2e-openstack-upgrade - e2e-openstack-upgrade-ipi-install-monitoringpvc container test":                                                                           {},
		"operator.Run multi-stage test e2e-openstack-upgrade - e2e-openstack-upgrade-ipi-install-install-stableinitial container test":                                                                   {},
		"operator.Run multi-stage test e2e-openstack-upgrade - e2e-openstack-upgrade-ipi-install-hosted-loki container test":                                                                             {},
		"operator.Run multi-stage test e2e-openstack-techpreview-serial - e2e-openstack-techpreview-serial-ipi-install-install container test":                                                           {},
		"operator.Run multi-stage test e2e-openstack-techpreview-parallel - e2e-openstack-techpreview-parallel-ipi-install-install container test":                                                       {},
		"operator.Run multi-stage test e2e-openstack-proxy - e2e-openstack-proxy-ipi-install-install container test":                                                                                     {},
		"operator.Run multi-stage test e2e-openstack-parallel - e2e-openstack-parallel-ipi-install-install container test":                                                                               {},
		"operator.Run multi-stage test e2e-openstack-ovn - e2e-openstack-ovn-ipi-install-install container test":                                                                                         {},
		"operator.Run multi-stage test e2e-openstack-kuryr - e2e-openstack-kuryr-ipi-install-install container test":                                                                                     {},
		"operator.Run multi-stage test e2e-openstack-fips - e2e-openstack-fips-ipi-install-install container test":                                                                                       {},
		"operator.Run multi-stage test e2e-openstack-az - e2e-openstack-az-ipi-install-install container test":                                                                                           {},
		"operator.Run multi-stage test e2e-network-migration-rollback - e2e-network-migration-rollback-ipi-install-install container test":                                                               {},
		"operator.Run multi-stage test e2e-network-migration - e2e-network-migration-ipi-install-install container test":                                                                                 {},
		"operator.Run multi-stage test e2e-metal-ipi-virtualmedia - e2e-metal-ipi-virtualmedia-baremetalds-devscripts-setup container test":                                                              {},
		"operator.Run multi-stage test e2e-metal-ipi-upgrade - e2e-metal-ipi-upgrade-baremetalds-devscripts-setup container test":                                                                        {},
		"operator.Run multi-stage test e2e-metal-ipi-ovn-dualstack-local-gateway - e2e-metal-ipi-ovn-dualstack-local-gateway-baremetalds-devscripts-setup container test":                                {},
		"operator.Run multi-stage test e2e-metal-ipi-ovn-dualstack - e2e-metal-ipi-ovn-dualstack-baremetalds-devscripts-setup container test":                                                            {},
		"operator.Run multi-stage test e2e-metal-ipi-compact - e2e-metal-ipi-compact-baremetalds-packet-teardown container test":                                                                         {},
		"operator.Run multi-stage test e2e-metal-ipi - e2e-metal-ipi-baremetalds-devscripts-setup container test":                                                                                        {},
		"operator.Run multi-stage test e2e-metal-assisted-ipv6 - e2e-metal-assisted-ipv6-baremetalds-packet-setup container test":                                                                        {},
		"operator.Run multi-stage test e2e-gcp-ovn - e2e-gcp-ovn-ipi-install-install container test":                                                                                                     {},
		"operator.Run multi-stage test e2e-gcp-fips - e2e-gcp-fips-ipi-install-install container test":                                                                                                   {},
		"operator.Run multi-stage test e2e-gcp-cucushift-ipi - e2e-gcp-cucushift-ipi-ipi-install-install container test":                                                                                 {},
		"operator.Run multi-stage test e2e-azure-upgrade-single-node - e2e-azure-upgrade-single-node-ipi-install-install-stableinitial container test":                                                   {},
		"operator.Run multi-stage test e2e-azure-upgrade - e2e-azure-upgrade-ipi-conf-azure container test":                                                                                              {},
		"operator.Run multi-stage test e2e-azure-fips-serial - e2e-azure-fips-serial-ipi-install-install container test":                                                                                 {},
		"operator.Run multi-stage test e2e-azure-fips - e2e-azure-fips-ipi-install-install container test":                                                                                               {},
		"operator.Run multi-stage test e2e-azure-deploy-cnv - e2e-azure-deploy-cnv-ipi-install-install container test":                                                                                   {},
		"operator.Run multi-stage test e2e-azure-compact-serial - e2e-azure-compact-serial-ipi-install-install container test":                                                                           {},
		"operator.Run multi-stage test e2e-azure-compact - e2e-azure-compact-ipi-install-install container test":                                                                                         {},
		"operator.Run multi-stage test e2e-azure-cilium - e2e-azure-cilium-ipi-install-install container test":                                                                                           {},
		"operator.Run multi-stage test e2e-aws-workers-rhel7 - e2e-aws-workers-rhel7-ipi-install-install container test":                                                                                 {},
		"operator.Run multi-stage test e2e-aws-upgrade-single-node - e2e-aws-upgrade-single-node-ipi-install-install-stableinitial container test":                                                       {},
		"operator.Run multi-stage test e2e-aws-upgrade-paused - e2e-aws-upgrade-paused-ipi-install-install-stableinitial container test":                                                                 {},
		"operator.Run multi-stage test e2e-aws-techpreview-serial - e2e-aws-techpreview-serial-ipi-install-install container test":                                                                       {},
		"operator.Run multi-stage test e2e-aws-techpreview - e2e-aws-techpreview-ipi-install-install container test":                                                                                     {},
		"operator.Run multi-stage test e2e-aws-ovn-network-stress - e2e-aws-ovn-network-stress-ipi-install-install container test":                                                                       {},
		"operator.Run multi-stage test e2e-aws-ovn-local-gateway - e2e-aws-ovn-local-gateway-ipi-install-install container test":                                                                         {},
		"operator.Run multi-stage test e2e-aws-ovn - e2e-aws-ovn-ipi-install-install container test":                                                                                                     {},
		"operator.Run multi-stage test e2e-aws-network-stress - e2e-aws-network-stress-ipi-install-install container test":                                                                               {},
		"operator.Run multi-stage test e2e-aws-hypershift - e2e-aws-hypershift-ipi-install-rbac container test":                                                                                          {},
		"operator.Run multi-stage test e2e-aws-fips-serial - e2e-aws-fips-serial-ipi-install-install container test":                                                                                     {},
		"operator.Run multi-stage test e2e-aws-fips - e2e-aws-fips-ipi-install-install container test":                                                                                                   {},
		"operator.Run multi-stage test e2e-aws-compact-upgrade - e2e-aws-compact-upgrade-ipi-install-install-stableinitial container test":                                                               {},
		"operator.Run multi-stage test e2e-aws-compact-serial - e2e-aws-compact-serial-ipi-install-install container test":                                                                               {},
		"operator.Run multi-stage test e2e-aws-compact - e2e-aws-compact-ipi-install-install container test":                                                                                             {},
		"operator.Run multi-stage test e2e-aws-cgroupsv2 - e2e-aws-cgroupsv2-ipi-install-install container test":                                                                                         {},
		"operator.Run multi-stage test e2e-aws-canary - e2e-aws-canary-ipi-install-install container test":                                                                                               {},
		"operator.Run multi-stage test console-aws - console-aws-ipi-install-install container test":                                                                                                     {},
		"operator.Find the input image upi-installer and tag it into the pipeline":                                                                                                                       {},
		"operator.Find the input image root and tag it into the pipeline":                                                                                                                                {},
		"operator.Find the input image origin-centos-8 and tag it into the pipeline":                                                                                                                     {},
		"operator.Find the input image openstack-installer and tag it into the pipeline":                                                                                                                 {},
		"operator.Find the input image ocp-cli-jq-latest and tag it into the pipeline":                                                                                                                   {},
		"operator.Find the input image ocp-4.5-upi-installer and tag it into the pipeline":                                                                                                               {},
		"operator.Find the input image machine-os-content and tag it into the pipeline":                                                                                                                  {},
		"operator.Find the input image libvirt-installer and tag it into the pipeline":                                                                                                                   {},
		"operator.Find the input image hypershift-hypershift-latest and tag it into the pipeline":                                                                                                        {},
		"operator.Find the input image dev-scripts and tag it into the pipeline":                                                                                                                         {},
		"operator.Find the input image console-tests and tag it into the pipeline":                                                                                                                       {},
		"operator.Find the input image cnv-ci-src-upgrade and tag it into the pipeline":                                                                                                                  {},
		"operator.Find the input image cnv-ci-src and tag it into the pipeline":                                                                                                                          {},
		"operator.Find the input image ci-verification-tests-latest and tag it into the pipeline":                                                                                                        {},
		"operator.Find the input image assisted-test-infra and tag it into the pipeline":                                                                                                                 {},
		"operator.Find the input image assisted-service and tag it into the pipeline":                                                                                                                    {},
		"operator.Find the input image assisted-installer-controller and tag it into the pipeline":                                                                                                       {},
		"operator.Find the input image assisted-installer-agent and tag it into the pipeline":                                                                                                            {},
		"operator.Find the input image assisted-installer and tag it into the pipeline":                                                                                                                  {},
		"operator.Find the input image ansible and tag it into the pipeline":                                                                                                                             {},
		"operator.Find all of the input images from ocp/4.7:${component} and tag them into the output image stream":                                                                                      {},
		"operator.Find all of the input images from ocp/4.10:${component} and tag them into the output image stream":                                                                                     {},
		"operator.Create the release image \"latest\" containing all images built by this job":                                                                                                           {},
		"operator.Create the release image \"initial\" containing all images built by this job":                                                                                                          {},
		"operator.All images are built and tagged into stable":                                                                                                                                           {},
		"operator install page":                                                       {},
		"operator conditions  storage":                                                {},
		"operator conditions  service-ca":                                             {},
		"operator conditions  page":                                                   {},
		"operator conditions  operator-lifecycle-manager-packageserver":               {},
		"operator conditions  operator-lifecycle-manager-catalog":                     {},
		"operator conditions  operator-lifecycle-manager":                             {},
		"operator conditions  openshift-samples":                                      {},
		"operator conditions  openshift-controller-manager":                           {},
		"operator conditions  node-tuning":                                            {},
		"operator conditions  marketplace":                                            {},
		"operator conditions  machine-approver":                                       {},
		"operator conditions  kube-scheduler":                                         {},
		"operator conditions  kube-apiserver":                                         {},
		"operator conditions  insights":                                               {},
		"operator conditions  dns":                                                    {},
		"operator conditions  csi-snapshot-controller":                                {},
		"operator conditions  console":                                                {},
		"operator conditions  config-operator":                                        {},
		"operator conditions  cluster-autoscaler":                                     {},
		"operator conditions  cloud-credential":                                       {},
		"operator conditions  cloud-controller-manager":                               {},
		"operator conditions  baremetal":                                              {},
		"oc_login.feature.Warning should be displayed when login failed via oc login": {},
		"oc_expose.feature.Access app througth secure service and regenerate service serving certs if it about to expire":                                                                                                                                                                                                                                         {},
		"oc new-app related scenarios.oc new-app/new-build should respect ImageStream hidden tag":                                                                                                                                                                                                                                                                 {},
		"oc import-image related feature.Tags should be added to ImageStream if image repository is from an external docker registry":                                                                                                                                                                                                                             {},
		"oc import-image related feature.Do not create tags for ImageStream if image repository does not have tags":                                                                                                                                                                                                                                               {},
		"oc import-image related feature.Could not import the tag when reference is true":                                                                                                                                                                                                                                                                         {},
		"oc idle.CLI - Idle service with dry-run":                                                                                                                                                                                                                                                                                                                 {},
		"oc idle.CLI - Idle service from file":                                                                                                                                                                                                                                                                                                                    {},
		"oc idle.CLI - Idle service by label":                                                                                                                                                                                                                                                                                                                     {},
		"oc idle.CLI - Idle all the service in the same project":                                                                                                                                                                                                                                                                                                  {},
		"oc debug related scenarios.oc should be able to debug init container":                                                                                                                                                                                                                                                                                    {},
		"jenkins.feature.new-app/new-build support for pipeline buildconfigs":                                                                                                                                                                                                                                                                                     {},
		"jenkins.feature.Using nodejs slave when do jenkinspipeline strategy (outline example : | 2 |)":                                                                                                                                                                                                                                                           {},
		"deployments.Add storage is applicable for all workloads deployments create a deployments resource and adds storage to it":                                                                                                                                                                                                                                {},
		"deploymentconfigs.Add storage is applicable for all workloads deploymentconfigs create a deploymentconfigs resource and adds storage to it":                                                                                                                                                                                                              {},
		"daemonsets.Add storage is applicable for all workloads daemonsets create a daemonsets resource and adds storage to it":                                                                                                                                                                                                                                   {},
		"build 'apps' with CLI.Handle build naming collisions":                                                                                                                                                                                                                                                                                                    {},
		"build 'apps' with CLI.Create applications only with multiple db images":                                                                                                                                                                                                                                                                                  {},
		"build 'apps' with CLI.Cannot create secret from local file and with same name via oc new-build":                                                                                                                                                                                                                                                          {},
		"[sig-storage] [sig-api-machinery] configmap-upgrade":                                                                                                                                                                                                                                                                                                     {},
		"[sig-storage] [Serial] Volume metrics should create volume metrics with the correct FilesystemMode PVC ref [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-storage] [Serial] Volume metrics should create volume metrics with the correct BlockMode PVC ref [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                                  {},
		"[sig-storage] Volumes NFSv4 should be mountable for NFSv4 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                                            {},
		"[sig-storage] Volumes NFSv3 should be mountable for NFSv3 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                                            {},
		"[sig-storage] Volumes ConfigMap should be mountable [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                                                  {},
		"[sig-storage] Subpath Container restart should verify that container can restart successfully after configmaps modified [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                             {},
		"[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                             {},
		"[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                             {},
		"[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                          {},
		"[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                      {},
		"[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                   {},
		"[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                              {},
		"[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                      {},
		"[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                               {},
		"[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                             {},
		"[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                          {},
		"[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                        {},
		"[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                     {},
		"[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                      {},
		"[sig-storage] Projected secret should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                 {},
		"[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                     {},
		"[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-storage] Projected downwardAPI should provide podname as non-root with fsgroup and defaultMode [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-storage] Projected downwardAPI should provide podname as non-root with fsgroup [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                 {},
		"[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                  {},
		"[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                     {},
		"[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                      {},
		"[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                   {},
		"[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                  {},
		"[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                         {},
		"[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                     {},
		"[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                  {},
		"[sig-storage] Projected configMap should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                            {},
		"[sig-storage] Projected configMap should be consumable from pods in volume as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                       {},
		"[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                   {},
		"[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                   {},
		"[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] One pod requesting one prebound PVC should be able to mount volume and write from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                   {},
		"[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] One pod requesting one prebound PVC should be able to mount volume and read from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir] One pod requesting one prebound PVC should be able to mount volume and write from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                     {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-link] One pod requesting one prebound PVC should be able to mount volume and write from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-link] One pod requesting one prebound PVC should be able to mount volume and read from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                 {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                 {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] One pod requesting one prebound PVC should be able to mount volume and read from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                      {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] One pod requesting one prebound PVC should be able to mount volume and read from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] One pod requesting one prebound PVC should be able to mount volume and read from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                       {},
		"[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] One pod requesting one prebound PVC should be able to mount volume and write from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] One pod requesting one prebound PVC should be able to mount volume and read from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                        {},
		"[sig-storage] PersistentVolumes-local  [Volume type: block] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-storage] PersistentVolumes-local  [Volume type: block] One pod requesting one prebound PVC should be able to mount volume and write from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                   {},
		"[sig-storage] PersistentVolumes-local  [Volume type: block] One pod requesting one prebound PVC should be able to mount volume and read from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-storage] PersistentVolumes-local  Stress with local volumes [Serial] should be able to process many pods and reuse local volumes [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                  {},
		"[sig-storage] PersistentVolumes-local  Pods sharing a single local PV [Serial] all pods should be running [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-storage] PersistentVolumes-local  Pod with node different from PV's NodeAffinity should fail scheduling due to different NodeAffinity [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-storage] PersistentVolumes NFS with multiple PVs and PVCs all in same ns should create 3 PVs and 3 PVCs: test write access [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-storage] PersistentVolumes NFS with multiple PVs and PVCs all in same ns should create 2 PVs and 4 PVCs: test write access [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs should create a non-pre-bound PV and PVC: test write access  [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PVC and non-pre-bound PV: test write access [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                  {},
		"[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PV and a pre-bound PVC: test write access [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-storage] PersistentVolumes GCEPD should test that deleting the PV before the pod does not cause pod deletion to fail on PD detach [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                               {},
		"[sig-storage] PV Protection Verify that PV bound to a PVC is not removed immediately [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                 {},
		"[sig-storage] PV Protection Verify \"immediate\" deletion of a PV that is not bound to a PVC [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                         {},
		"[sig-storage] Mounted volume expand Should verify mounted devices can be resized [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with mount options [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (ext4)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Pre-provisioned PV (ext4)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Pre-provisioned PV (ext3)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Pre-provisioned PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Inline-volume (ext4)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Inline-volume (ext3)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Inline-volume (ext3)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Inline-volume (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (immediate binding)] topology should provision a volume and schedule a pod with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (immediate binding)] topology should fail to schedule a pod which has topologies that conflict with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (ext4)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (ext3)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (ext3)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (delayed binding)] topology should provision a volume and schedule a pod with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (delayed binding)] topology should fail to schedule a pod which has topologies that conflict with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with mount options [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup skips ownership changes to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":  {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":             {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                          {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                     {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand Verify if offline PVC expansion works [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (block volmode)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand Verify if offline PVC expansion works [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Pre-provisioned PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Pre-provisioned PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Inline-volume (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (immediate binding)] topology should provision a volume and schedule a pod with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (delayed binding)] topology should provision a volume and schedule a pod with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup skips ownership changes to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":            {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                         {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                    {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (immediate binding)] topology should fail to schedule a pod which has topologies that conflict with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (delayed binding)] topology should fail to schedule a pod which has topologies that conflict with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Pre-provisioned PV (ext4)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Pre-provisioned PV (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Pre-provisioned PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Inline-volume (ext4)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Inline-volume (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (immediate binding)] topology should provision a volume and schedule a pod with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (immediate binding)] topology should fail to schedule a pod which has topologies that conflict with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (ext4)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (delayed binding)] topology should provision a volume and schedule a pod with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (delayed binding)] topology should fail to schedule a pod which has topologies that conflict with AllowedTopologies [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with mount options [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup skips ownership changes to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":    {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":               {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                            {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                       {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand Verify if offline PVC expansion works [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (block volmode)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand Verify if offline PVC expansion works [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                            {},
		"[sig-storage] HostPath should support subPath [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                                      {},
		"[sig-storage] HostPath should support r/w [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                                          {},
		"[sig-storage] HostPath should give a volume the correct mode [LinuxOnly] [NodeConformance] [Skipped:ibmcloud] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                        {},
		"[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : secret [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : configmap [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                        {},
		"[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                                     {},
		"[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] volume on tmpfs should have the correct mode using FSGroup [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                {},
		"[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] volume on default medium should have the correct mode using FSGroup [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] nonexistent volume subPath should have the correct mode and owner using FSGroup [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                           {},
		"[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] new files should be created with FSGroup ownership when container is root [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                 {},
		"[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] files with FSGroup ownership should support (root,0644,tmpfs) [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                             {},
		"[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                             {},
		"[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                  {},
		"[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                  {},
		"[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                  {},
		"[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                            {},
		"[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                            {},
		"[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                            {},
		"[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                            {},
		"[sig-storage] EmptyDir volumes pod should support memory backed volumes of specified size [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                            {},
		"[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                       {},
		"[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                  {},
		"[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                {},
		"[sig-storage] Downward API volume should provide podname as non-root with fsgroup and defaultMode [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                  {},
		"[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                   {},
		"[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                         {},
		"[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                  {},
		"[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                     {},
		"[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                       {},
		"[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                {},
		"[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                        {},
		"[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                             {},
		"[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                            {},
		"[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                   {},
		"[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                 {},
		"[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                               {},
		"[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                            {},
		"[sig-storage] ConfigMap should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                      {},
		"[sig-storage] ConfigMap should be consumable from pods in volume as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                            {},
		"[sig-storage] CSI mock volume storage capacity unlimited [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                                             {},
		"[sig-storage] CSI mock volume storage capacity exhausted, late binding, with topology [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                {},
		"[sig-storage] CSI mock volume storage capacity exhausted, late binding, no topology [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                  {},
		"[sig-storage] CSI mock volume storage capacity exhausted, immediate binding [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                          {},
		"[sig-storage] CSI mock volume CSIStorageCapacity CSIStorageCapacity used, no capacity [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                {},
		"[sig-storage] CSI mock volume CSIStorageCapacity CSIStorageCapacity used, have capacity [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                              {},
		"[sig-storage] CSI mock volume CSIStorageCapacity CSIStorageCapacity disabled [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                         {},
		"[sig-storage] CSI mock volume CSIServiceAccountToken token should not be plumbed down when csiServiceAccountTokenEnabled=false [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                       {},
		"[sig-storage] CSI mock volume CSIServiceAccountToken token should not be plumbed down when CSIDriver is not deployed [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-storage] CSI mock volume CSIServiceAccountToken token should be plumbed down when csiServiceAccountTokenEnabled=true [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                            {},
		"[sig-storage] CSI mock volume CSI workload information using mock driver should not be passed when podInfoOnMount=false [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] CSI mock volume CSI workload information using mock driver should be passed when podInfoOnMount=true [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-storage] CSI mock volume CSI online volume expansion should expand volume without restarting pod if attach=off, nodeExpansion=on [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-storage] CSI mock volume CSI attach test using mock driver should require VolumeAttach for drivers with attachment [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] CSI mock volume CSI attach test using mock driver should preserve attachment policy when no CSIDriver present [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-storage] CSI mock volume CSI attach test using mock driver should not require VolumeAttach for drivers without attachment [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                       {},
		"[sig-storage] CSI mock volume CSI Volume Snapshots secrets [Feature:VolumeSnapshotDataSource] volume snapshot create/delete with secrets [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                             {},
		"[sig-storage] CSI mock volume CSI FSGroupPolicy [LinuxOnly] should not modify fsGroup if fsGroupPolicy=None [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                          {},
		"[sig-storage] CSI mock volume CSI FSGroupPolicy [LinuxOnly] should modify fsGroup if fsGroupPolicy=default [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                           {},
		"[sig-storage] CSI mock volume CSI FSGroupPolicy [LinuxOnly] should modify fsGroup if fsGroupPolicy=File [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Generic Ephemeral-volume (default fs) (late-binding)] ephemeral should support two pods which share the same volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                   {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Generic Ephemeral-volume (default fs) (late-binding)] ephemeral should support multiple inline ephemeral volumes [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                      {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Generic Ephemeral-volume (default fs) (late-binding)] ephemeral should create read/write inline ephemeral volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                      {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Generic Ephemeral-volume (default fs) (late-binding)] ephemeral should create read-only inline ephemeral volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                       {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Generic Ephemeral-volume (default fs) (immediate-binding)] ephemeral should support two pods which share the same volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                              {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Generic Ephemeral-volume (default fs) (immediate-binding)] ephemeral should create read/write inline ephemeral volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                 {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Generic Ephemeral-volume (default fs) (immediate-binding)] ephemeral should create read-only inline ephemeral volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                  {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic Snapshot (retain policy)] snapshottable[Feature:VolumeSnapshotDataSource] volume snapshot controller  should check snapshot fields, check restore correctly works after modifying source data, check deletion [Suite:openshift/conformance/parallel] [Suite:k8s]":                 {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic Snapshot (delete policy)] snapshottable[Feature:VolumeSnapshotDataSource] volume snapshot controller  should check snapshot fields, check restore correctly works after modifying source data, check deletion [Suite:openshift/conformance/parallel] [Suite:k8s]":                 {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (filesystem volmode)] volumeLimits should verify that all csinodes have volume limits [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                      {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                       {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                      {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                    {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with snapshot data source [Feature:VolumeSnapshotDataSource] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                           {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with pvc data source [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                   {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand Verify if offline PVC expansion works [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] provisioning should provision storage with snapshot data source [Feature:VolumeSnapshotDataSource] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                        {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] provisioning should provision storage with pvc data source [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand Verify if offline PVC expansion works [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: CSI Ephemeral-volume (default fs)] ephemeral should support multiple inline ephemeral volumes [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                         {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: CSI Ephemeral-volume (default fs)] ephemeral should create read/write inline ephemeral volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                         {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: CSI Ephemeral-volume (default fs)] ephemeral should create read-only inline ephemeral volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-scheduling] SchedulerPriorities [Serial] PodTopologySpread Scoring validates pod should be preferably scheduled to node which makes the matching pods more evenly distributed [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                     {},
		"[sig-scheduling] SchedulerPriorities [Serial] Pod should be scheduled to node that don't match the PodAntiAffinity terms [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                               {},
		"[sig-scheduling] SchedulerPriorities [Serial] Pod should be preferably scheduled to nodes pod can tolerate [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                                                            {},
		"[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                                                                                   {},
		"[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                 {},
		"[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                                         {},
		"[sig-scheduling] SchedulerPreemption [Serial] PodTopologySpread Preemption validates proper pods are preempted [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                         {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance] [Slow] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates that taints-tolerations is respected if not matching [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                           {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates that taints-tolerations is respected if matching [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                               {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates that required NodeAffinity setting is respected if matching [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates that NodeAffinity is respected if not matching [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                                 {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates pod overhead is considered along with resource limits of pods that are allowed to run verify pod overhead is accounted for [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                     {},
		"[sig-scheduling] SchedulerPredicates [Serial] PodTopologySpread Filtering validates 4 pods with MaxSkew=1 are evenly distributed into 2 nodes [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                          {},
		"[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-node] pods should not fail on systemd timeouts":                             {},
		"[sig-node] pods should never transition back to pending":                         {},
		"[sig-node] overlapping apiserver process detected during kube-apiserver rollout": {},
		"[sig-node] kubelet terminates kube-apiserver gracefully":                         {},
		"[sig-node] kubelet Clean up pods on node kubelet should be able to delete 10 pods per node in 1m0s. [Serial] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                           {},
		"[sig-node] [Feature:Example] Downward API should create a pod that prints his name and namespace [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                     {},
		"[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance] [Suite:k8s]":                                                                                                                                                                       {},
		"[sig-node] Variable Expansion should succeed in writing subpaths in container [Slow] [Conformance] [Suite:k8s]":                                                                                                                                                                                                                          {},
		"[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Slow] [Conformance] [Suite:k8s]":                                                                                                                                                                                                       {},
		"[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Slow] [Conformance] [Suite:k8s]":                                                                                                                                                                                                   {},
		"[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                             {},
		"[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                      {},
		"[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                         {},
		"[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support unsafe sysctls which are actually allowed [MinimumKubeletVersion:1.21] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                               {},
		"[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-node] Sysctls [LinuxOnly] [NodeConformance] should not launch unsafe, but not explicitly enabled sysctls on the node [MinimumKubeletVersion:1.21] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                               {},
		"[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                              {},
		"[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when true [LinuxOnly] [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                         {},
		"[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when not explicitly set and uid != 0 [LinuxOnly] [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                              {},
		"[sig-node] Security Context should support seccomp unconfined on the container [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                           {},
		"[sig-node] Security Context should support seccomp default which is unconfined [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                           {},
		"[sig-node] Security Context should support pod.Spec.SecurityContext.SupplementalGroups [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                            {},
		"[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                              {},
		"[sig-node] Security Context should support container.SecurityContext.RunAsUser [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                           {},
		"[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                            {},
		"[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                  {},
		"[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with readonly rootfs when readOnlyRootFilesystem=true [LinuxOnly] [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                             {},
		"[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                              {},
		"[sig-node] Security Context When creating a pod with privileged should run the container as privileged when true [LinuxOnly] [NodeFeature:HostAccess] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                     {},
		"[sig-node] Security Context When creating a container with runAsUser should run the container with uid 0 [LinuxOnly] [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                               {},
		"[sig-node] Security Context When creating a container with runAsNonRoot should run with an image specified user ID [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                   {},
		"[sig-node] Security Context When creating a container with runAsNonRoot should run with an explicit non-root user ID [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                     {},
		"[sig-node] Security Context When creating a container with runAsNonRoot should not run without a specified user ID [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                   {},
		"[sig-node] Security Context When creating a container with runAsNonRoot should not run with an explicit root user ID [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                     {},
		"[sig-node] Secrets should patch a secret [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                                       {},
		"[sig-node] Secrets should fail to create secret due to empty secret key [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                        {},
		"[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-node] RuntimeClass  should support RuntimeClasses API operations [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                          {},
		"[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                         {},
		"[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                 {},
		"[sig-node] Probing container should not be ready with an exec readiness probe timeout [MinimumKubeletVersion:1.20] [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                 {},
		"[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                              {},
		"[sig-node] Probing container should be restarted with an exec liveness probe with timeout [MinimumKubeletVersion:1.20] [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                             {},
		"[sig-node] Probing container should be restarted with a local redirect http liveness probe [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                           {},
		"[sig-node] Probing container should be restarted with a failing exec liveness probe that took longer than the timeout [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-node] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                              {},
		"[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                         {},
		"[sig-node] Probing container should be restarted startup probe fails [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                 {},
		"[sig-node] Probing container should be restarted by liveness probe after startup probe enables it [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-node] Probing container should *not* be restarted with a non-local redirect http liveness probe [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-node] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                        {},
		"[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                   {},
		"[sig-node] Probing container should *not* be restarted by liveness probe because startup probe delays it [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                             {},
		"[sig-node] PrivilegedPod [NodeConformance] should enable privileged commands [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-node] PreStop should call prestop when killing a pod  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                     {},
		"[sig-node] PreStop graceful pod terminated should wait until preStop hook completes the process [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                      {},
		"[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance] [Skipped:Proxy] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                            {},
		"[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance] [Skipped:Proxy] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                      {},
		"[sig-node] Pods should support pod readiness gates [NodeFeature:PodReadinessGate] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                    {},
		"[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                         {},
		"[sig-node] Pods should get a host IP [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                         {},
		"[sig-node] Pods should delete a collection of pods [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                             {},
		"[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                            {},
		"[sig-node] Pods should be updated [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                            {},
		"[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                             {},
		"[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                {},
		"[sig-node] Pods Extended Pod Container Status should never report success for a pending container [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-node] Pods Extended Delete Grace Period should be submitted and removed [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                         {},
		"[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                               {},
		"[sig-node] PodTemplates should delete a collection of pod templates [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                            {},
		"[sig-node] NodeLease when the NodeLease feature is enabled the kubelet should report node status infrequently [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                        {},
		"[sig-node] NodeLease when the NodeLease feature is enabled the kubelet should create and update a lease in the kube-node-lease namespace [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                             {},
		"[sig-node] NodeLease when the NodeLease feature is enabled should have OwnerReferences set [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                           {},
		"[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance] [Skipped:SingleReplicaTopology] [Suite:k8s]":                                                                                                                                                                             {},
		"[sig-node] NoExecuteTaintManager Single Pod [Serial] evicts pods from tainted nodes [Skipped:SingleReplicaTopology] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                    {},
		"[sig-node] NoExecuteTaintManager Single Pod [Serial] eventually evict pod with finite tolerations from tainted nodes [Skipped:SingleReplicaTopology] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                   {},
		"[sig-node] NoExecuteTaintManager Single Pod [Serial] doesn't evict pod with tolerations from tainted nodes [Skipped:SingleReplicaTopology] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                             {},
		"[sig-node] NoExecuteTaintManager Multiple Pods [Serial] only evicts pods without tolerations from tainted nodes [Skipped:SingleReplicaTopology] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                        {},
		"[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance] [Skipped:SingleReplicaTopology] [Suite:k8s]":                                                                                                                                                                    {},
		"[sig-node] Lease lease API should be available [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                                 {},
		"[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                             {},
		"[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                             {},
		"[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                 {},
		"[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                {},
		"[sig-node] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                             {},
		"[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                      {},
		"[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                      {},
		"[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                 {},
		"[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                        {},
		"[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-node] Downward API should provide host IP and pod IP as an env var if pod uses host network [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                       {},
		"[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                     {},
		"[sig-node] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                     {},
		"[sig-node] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                      {},
		"[sig-node] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                           {},
		"[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                          {},
		"[sig-node] Container Runtime blackbox test when running a container with a new image should not be able to pull image from invalid registry [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                        {},
		"[sig-node] Container Runtime blackbox test when running a container with a new image should not be able to pull from private registry without secret [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                               {},
		"[sig-node] Container Runtime blackbox test when running a container with a new image should be able to pull image [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                  {},
		"[sig-node] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                 {},
		"[sig-node] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                  {},
		"[sig-node] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                    {},
		"[sig-node] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                       {},
		"[sig-node] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                        {},
		"[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                          {},
		"[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                          {},
		"[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                        {},
		"[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                        {},
		"[sig-node] ConfigMap should update ConfigMap successfully [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                            {},
		"[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                  {},
		"[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                            {},
		"[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                           {},
		"[sig-network] pods should successfully create sandboxes by writing child":                                                                                                                                                                                                                                                                {},
		"[sig-network] pods should successfully create sandboxes by reading container":                                                                                                                                                                                                                                                            {},
		"[sig-network] [Feature:IPv6DualStack] should have ipv4 and ipv6 internal node ip [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                     {},
		"[sig-network] [Feature:IPv6DualStack] should create service with ipv6,v4 cluster ip [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                  {},
		"[sig-network] [Feature:IPv6DualStack] should create service with ipv6 cluster ip [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                     {},
		"[sig-network] [Feature:IPv6DualStack] should create service with ipv4,v6 cluster ip [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                  {},
		"[sig-network] [Feature:IPv6DualStack] should create service with ipv4 cluster ip [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                     {},
		"[sig-network] [Feature:IPv6DualStack] should create pod, add ipv6 and ipv4 ip to pod ips [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-network] [Feature:IPv6DualStack] should create a single stack service with cluster ip from primary service range [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-network] [Feature:IPv6DualStack] should be able to reach pod on ipv4 and ipv6 ip [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should update endpoints: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                         {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should update endpoints: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                        {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should function for service endpoints using hostNetwork [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should function for pod-Service: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                 {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should function for pod-Service: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should function for node-Service: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should function for node-Service: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                               {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should function for endpoint-Service: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                            {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should function for endpoint-Service: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                           {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should be able to handle large requests: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                         {},
		"[sig-network] [Feature:IPv6DualStack] Granular Checks: Services Secondary IP Family [LinuxOnly] should be able to handle large requests: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                        {},
		"[sig-network] Services should test the lifecycle of an Endpoint [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                {},
		"[sig-network] Services should serve multiport endpoints from pods  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-network] Services should release NodePorts on delete [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                            {},
		"[sig-network] Services should provide secure master service  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                   {},
		"[sig-network] Services should prevent NodePort collisions [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                            {},
		"[sig-network] Services should preserve source pod IP for traffic thru service cluster IP [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                           {},
		"[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                      {},
		"[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                   {},
		"[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                              {},
		"[sig-network] Services should find a service from listing all namespaces [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                       {},
		"[sig-network] Services should create endpoints for unready pods [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                      {},
		"[sig-network] Services should complete a service status lifecycle [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-network] Services should check NodePort out-of-range [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                            {},
		"[sig-network] Services should be rejected when no endpoints exist [Skipped:ibmcloud] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                 {},
		"[sig-network] Services should be possible to connect to a service via ExternalIP when the external IP is not assigned to a node [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                      {},
		"[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                   {},
		"[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                              {},
		"[sig-network] Services should be able to create a functioning NodePort service [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                        {},
		"[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                        {},
		"[sig-network] Services should allow pods to hairpin back to themselves through services [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-network] Service endpoints latency should not be very high  [Conformance] [Serial] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                                                                        {},
		"[sig-network] SCTP [Feature:SCTP] [LinuxOnly] should create a Pod with SCTP HostPort [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                 {},
		"[sig-network] SCTP [Feature:SCTP] [LinuxOnly] should allow creating a basic SCTP service with pod and endpoints [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                       {},
		"[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-network] Networking should provide Internet connection for containers [Feature:Networking-IPv4] [Skipped:Disconnected] [Skipped:azure] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-network] Networking Granular Checks: Services should update endpoints: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                      {},
		"[sig-network] Networking Granular Checks: Services should update endpoints: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                     {},
		"[sig-network] Networking Granular Checks: Services should function for pod-Service: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-network] Networking Granular Checks: Services should function for pod-Service: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-network] Networking Granular Checks: Services should function for node-Service: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-network] Networking Granular Checks: Services should function for client IP based session affinity: udp [LinuxOnly] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-network] Networking Granular Checks: Services should function for client IP based session affinity: http [LinuxOnly] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                            {},
		"[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                  {},
		"[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                              {},
		"[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                             {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should support allow-all policy [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                             {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce policy to allow traffic only from a different namespace, based on NamespaceSelector [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                          {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce policy based on PodSelector with MatchExpressions[Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                             {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce policy based on PodSelector and NamespaceSelector [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                            {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce multiple, stacked policies with overlapping podSelectors [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                     {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should allow ingress access on one named port [Feature:NetworkPolicy] [Skipped:Network/OVNKubernetes] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]":                {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should allow ingress access from updated namespace [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                          {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should allow ingress access from namespace on one named port [Feature:NetworkPolicy] [Skipped:Network/OVNKubernetes] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should allow egress access on one named port [Feature:NetworkPolicy] [Skipped:Network/OVNKubernetes] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]":                 {},
		"[sig-network] NetworkPolicy API should support creating NetworkPolicy API operations [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                 {},
		"[sig-network] IngressClass [Feature:Ingress] should prevent Ingress creation if more than 1 IngressClass marked as default [Serial] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-network] IngressClass [Feature:Ingress] should not set default value if no default IngressClass [Serial] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                            {},
		"[sig-network] Ingress API should support creating Ingress API operations [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                       {},
		"[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                {},
		"[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                               {},
		"[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                    {},
		"[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                      {},
		"[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                             {},
		"[sig-network] DNS should support configurable pod resolv.conf [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                        {},
		"[sig-network] DNS should support configurable pod DNS nameservers [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-network] DNS should resolve DNS of partial qualified names for the cluster [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                          {},
		"[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                       {},
		"[sig-network] DNS should provide DNS for the cluster [Provider:GCE] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                  {},
		"[sig-network] DNS should provide DNS for the cluster  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                          {},
		"[sig-network] DNS should provide DNS for services  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                             {},
		"[sig-network] DNS should provide DNS for pods for Subdomain [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                    {},
		"[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                         {},
		"[sig-network] DNS should provide DNS for ExternalName services [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                 {},
		"[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-network] Conntrack should be able to preserve UDP traffic when server pod cycles for a NodePort service [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-network-edge][Feature:Idling] Unidling should handle many UDP senders (by continuing to drop all packets on the floor) [Serial] [Suite:openshift/conformance/serial]":                                                                                                                                                               {},
		"[sig-network-edge][Feature:Idling] Unidling should handle many TCP connections by possibly dropping those over a certain bound [Serial] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/serial]":                                                                                                                            {},
		"[sig-instrumentation] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                          {},
		"[sig-instrumentation] Events should delete a collection of events [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                      {},
		"[sig-instrumentation] Events API should delete a collection of events [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                          {},
		"[sig-imageregistry][Feature:ImageTriggers][Serial] ImageStream admission TestImageStreamTagsAdmission [Suite:openshift/conformance/serial]":                                                                                                                                                                                              {},
		"[sig-imageregistry][Feature:ImageTriggers][Serial] ImageStream API TestImageStreamWithoutDockerImageConfig [Suite:openshift/conformance/serial]":                                                                                                                                                                                         {},
		"[sig-imageregistry][Feature:ImageTriggers][Serial] ImageStream API TestImageStreamMappingCreate [Suite:openshift/conformance/serial]":                                                                                                                                                                                                    {},
		"[sig-etcd][Feature:DisasterRecovery][Disruptive] [Feature:EtcdRecovery] Cluster should restore itself after quorum loss [Serial]":                                                                                                                                                                                                        {},
		"[sig-etcd][Feature:DisasterRecovery][Disruptive] [Feature:EtcdRecovery] Cluster should recover from a backup taken on one node and recovered on another [Serial]":                                                                                                                                                                        {},
		"[sig-cluster-lifecycle] cluster upgrade should complete in 210.00 minutes":                                                                                                                                                                                                                                                               {},
		"[sig-cluster-lifecycle] cluster upgrade should complete in 105.00 minutes":                                                                                                                                                                                                                                                               {},
		"[sig-cluster-lifecycle] Cluster version operator acknowledges upgrade":                                                                                                                                                                                                                                                                   {},
		"[sig-cli] Kubectl client kubectl wait should ignore not found error with --for=delete [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                {},
		"[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-cli] Kubectl client Simple pod should support port-forward [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                      {},
		"[sig-cli] Kubectl client Simple pod should support inline execution and attach [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                       {},
		"[sig-cli] Kubectl client Simple pod should support exec using resource/name [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                          {},
		"[sig-cli] Kubectl client Simple pod should support exec through kubectl proxy [Skipped:Proxy] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                        {},
		"[sig-cli] Kubectl client Simple pod should support exec through an HTTP proxy [Skipped:Proxy] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                        {},
		"[sig-cli] Kubectl client Simple pod should support exec [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                              {},
		"[sig-cli] Kubectl client Simple pod should return command exit codes running a successful command [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-cli] Kubectl client Simple pod should return command exit codes execing into a container with a successful command [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                              {},
		"[sig-cli] Kubectl client Simple pod should return command exit codes execing into a container with a failing command [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                 {},
		"[sig-cli] Kubectl client Simple pod should contain last line of the log [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                              {},
		"[sig-cli] Kubectl client Proxy server should support proxy with --port 0  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                      {},
		"[sig-cli] Kubectl client Proxy server should support --unix-socket=/path  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                      {},
		"[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                  {},
		"[sig-cli] Kubectl client Kubectl taint [Serial] should update the taint on a node [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                                      {},
		"[sig-cli] Kubectl client Kubectl taint [Serial] should remove all the taints with the same key off a node [Skipped:SingleReplicaTopology] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                              {},
		"[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                              {},
		"[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-cli] Kubectl client Kubectl logs should be able to retrieve and filter logs  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                  {},
		"[sig-cli] Kubectl client Kubectl get componentstatuses should get componentstatuses [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                  {},
		"[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                         {},
		"[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                          {},
		"[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                        {},
		"[sig-cli] Kubectl client Kubectl create quota should reject quota with invalid scopes [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                {},
		"[sig-cli] Kubectl client Kubectl create quota should create a quota without scopes [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                   {},
		"[sig-cli] Kubectl client Kubectl create quota should create a quota with scopes [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                      {},
		"[sig-cli] Kubectl client Kubectl copy should copy a file from a running Pod [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                          {},
		"[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                   {},
		"[sig-cli] Kubectl client Kubectl cluster-info dump should check if cluster-info dump succeeds [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                        {},
		"[sig-cli] Kubectl client Kubectl client-side validation should create/apply a valid CR with arbitrary-extra properties for CRD with partially-specified validation schema [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                            {},
		"[sig-cli] Kubectl client Kubectl client-side validation should create/apply a valid CR for CRD with validation schema [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-cli] Kubectl client Kubectl client-side validation should create/apply a CR with unknown fields for CRD with no validation schema [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                               {},
		"[sig-cli] Kubectl client Kubectl apply should reuse port when apply to an existing SVC [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                               {},
		"[sig-cli] Kubectl client Kubectl apply should apply a new configuration to an existing RC [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                            {},
		"[sig-cli] Kubectl client Kubectl apply apply set/view last-applied [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                   {},
		"[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                 {},
		"[sig-cli] Kubectl Port forwarding With a server listening on localhost that expects a client request should support a client that connects, sends DATA, and disconnects [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                              {},
		"[sig-cli] Kubectl Port forwarding With a server listening on localhost that expects NO client request should support a client that connects, sends DATA, and disconnects [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                             {},
		"[sig-cli] Kubectl Port forwarding With a server listening on localhost should support forwarding over websockets [Skipped:Proxy] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                     {},
		"[sig-cli] Kubectl Port forwarding With a server listening on 0.0.0.0 that expects a client request should support a client that connects, sends NO DATA, and disconnects [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                             {},
		"[sig-cli] Kubectl Port forwarding With a server listening on 0.0.0.0 that expects a client request should support a client that connects, sends DATA, and disconnects [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                {},
		"[sig-cli] Kubectl Port forwarding With a server listening on 0.0.0.0 that expects NO client request should support a client that connects, sends DATA, and disconnects [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                               {},
		"[sig-cli] Kubectl Port forwarding With a server listening on 0.0.0.0 should support forwarding over websockets [Skipped:Proxy] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                       {},
		"[sig-autoscaling] [Feature:HPA] Horizontal pod autoscaling (scale resource: CPU) ReplicationController light Should scale from 1 pod to 2 pods [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                       {},
		"[sig-auth][Feature:ProjectAPI][Serial]  TestUnprivilegedNewProjectDenied [Suite:openshift/conformance/serial]":                                                                                                                                                                                                                           {},
		"[sig-auth] [Feature:NodeAuthorizer] Getting an existing secret should exit with the Forbidden error [Skipped:ibmcloud] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                               {},
		"[sig-auth] [Feature:NodeAuthorizer] Getting an existing configmap should exit with the Forbidden error [Skipped:ibmcloud] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                            {},
		"[sig-auth] [Feature:NodeAuthorizer] Getting a secret for a workload the node has access to should succeed [Skipped:ibmcloud] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                         {},
		"[sig-auth] [Feature:NodeAuthorizer] Getting a non-existent secret should exit with the Forbidden error, not a NotFound error [Skipped:ibmcloud] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                      {},
		"[sig-auth] [Feature:NodeAuthorizer] Getting a non-existent configmap should exit with the Forbidden error, not a NotFound error [Skipped:ibmcloud] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                   {},
		"[sig-auth] [Feature:NodeAuthorizer] A node shouldn't be able to delete another node [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                  {},
		"[sig-auth] [Feature:NodeAuthorizer] A node shouldn't be able to create another node [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                  {},
		"[sig-auth] [Feature:NodeAuthenticator] The kubelet's main port 10250 should reject requests with no credentials [Skipped:ibmcloud] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                   {},
		"[sig-auth] [Feature:NodeAuthenticator] The kubelet can delegate ServiceAccount tokens to the API server [Skipped:ibmcloud] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                           {},
		"[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-auth] ServiceAccounts should mount projected service account token [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                        {},
		"[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                            {},
		"[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                     {},
		"[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                               {},
		"[sig-auth] Certificates API [Privileged:ClusterAdmin] should support building a client with a CSR [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                    {},
		"[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                        {},
		"[sig-architecture] platform pods should not fail to start":                                 {},
		"[sig-architecture] platform pods should not exit more than once with a non-zero exit code": {},
		"[sig-architecture] platform pods should not be force deleted with gracePeriod 0":           {},
		"[sig-arch] events should not repeat pathologically in e2e namespaces":                      {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                           {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                             {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should implement legacy replacement when the update strategy is OnDelete [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                     {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                    {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance] [Suite:k8s]":                                                                           {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance] [Suite:k8s]":                                                                                                {},
		"[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                            {},
		"[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                        {},
		"[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                 {},
		"[sig-apps] ReplicationController should serve a basic image on each replica with a private image [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                       {},
		"[sig-apps] ReplicationController should release no longer matching pods [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                          {},
		"[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                {},
		"[sig-apps] ReplicaSet should surface a failure condition on a common issue like exceeded quota [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                         {},
		"[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                            {},
		"[sig-apps] ReplicaSet should serve a basic image on each replica with a private image [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                  {},
		"[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                 {},
		"[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                         {},
		"[sig-apps] Job should run a job to completion when tasks succeed [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                       {},
		"[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                {},
		"[sig-apps] Job should remove pods when job is deleted [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                  {},
		"[sig-apps] Job should not create pods when created in suspend state [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-apps] Job should fail when exceeds active deadline [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-apps] Job should fail to exceed backoffLimit [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-apps] Job should delete pods when suspended [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                       {},
		"[sig-apps] Job should delete a job [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                               {},
		"[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                       {},
		"[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                   {},
		"[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                {},
		"[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                              {},
		"[sig-apps] DisruptionController evictions: too few pods, replicaSet, percentage => should not allow an eviction [Serial] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                 {},
		"[sig-apps] DisruptionController evictions: too few pods, absolute => should not allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                      {},
		"[sig-apps] DisruptionController evictions: no PDB => should allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-apps] DisruptionController evictions: maxUnavailable deny evictions, integer => should not allow an eviction [Serial] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                               {},
		"[sig-apps] DisruptionController evictions: maxUnavailable allow single eviction, percentage => should allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                {},
		"[sig-apps] DisruptionController evictions: enough pods, absolute => should allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                           {},
		"[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                      {},
		"[sig-apps] Deployment test Deployment ReplicaSet orphaning and adoption regarding controllerRef [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                        {},
		"[sig-apps] Deployment should validate Deployment Status endpoints [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                {},
		"[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                   {},
		"[sig-apps] Deployment iterative rollouts should eventually progress [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-apps] Deployment deployment should support rollover [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                         {},
		"[sig-apps] Deployment deployment should delete old replica sets [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                  {},
		"[sig-apps] Deployment deployment reaping should cascade to its replica sets and pods [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                   {},
		"[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                         {},
		"[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                              {},
		"[sig-apps] Deployment Deployment should have a working scale subresource [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                         {},
		"[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                        {},
		"[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                        {},
		"[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                   {},
		"[sig-apps] Daemon set [Serial] should run and stop complex daemon with node affinity [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                     {},
		"[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                  {},
		"[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance] [Skipped:SingleReplicaTopology] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                        {},
		"[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                            {},
		"[sig-apps] Daemon set [Serial] should not update pod when spec was updated and update strategy is OnDelete [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                               {},
		"[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                   {},
		"[sig-apps] CronJob should support CronJob API operations [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                         {},
		"[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                    {},
		"[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                    {},
		"[sig-apps] CronJob should remove from active list jobs that have been deleted [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance] [Suite:k8s]":                                                                                                                                                                    {},
		"[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance] [Suite:k8s]":                                                                                                                                                                               {},
		"[sig-apps] CronJob should not emit unexpected warnings [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                 {},
		"[sig-apps] CronJob should delete successful finished jobs with limit of one successful job [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-apps] CronJob should delete failed finished jobs with limit of one job [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                            {},
		"[sig-apps] CronJob should be able to schedule after more than 100 missed schedule [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                      {},
		"[sig-api-machinery] server version should find the server version [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                {},
		"[sig-api-machinery] openshift-apiserver-reused-connection should be available":                                                                                                                                                                                             {},
		"[sig-api-machinery] openshift-apiserver-new-connection should be available":                                                                                                                                                                                                {},
		"[sig-api-machinery] oauth-apiserver-reused-connection should be available":                                                                                                                                                                                                 {},
		"[sig-api-machinery] oauth-apiserver-new-connection should be available":                                                                                                                                                                                                    {},
		"[sig-api-machinery] kube-apiserver-reused-connection should be available":                                                                                                                                                                                                  {},
		"[sig-api-machinery] kube-apiserver-new-connection should be available":                                                                                                                                                                                                     {},
		"[sig-api-machinery] kube-apiserver terminates within graceful termination period":                                                                                                                                                                                          {},
		"[sig-api-machinery] health handlers should contain necessary checks [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-api-machinery] client-go should negotiate watch and report errors with accept \"application/vnd.kubernetes.protobuf,application/json\" [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                            {},
		"[sig-api-machinery] client-go should negotiate watch and report errors with accept \"application/vnd.kubernetes.protobuf\" [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                             {},
		"[sig-api-machinery] client-go should negotiate watch and report errors with accept \"application/json,application/vnd.kubernetes.protobuf\" [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                            {},
		"[sig-api-machinery] client-go should negotiate watch and report errors with accept \"application/json\" [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                {},
		"[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                              {},
		"[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                            {},
		"[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                   {},
		"[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                    {},
		"[sig-api-machinery] Servers with support for Table transformation should return pod details [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                            {},
		"[sig-api-machinery] Servers with support for Table transformation should return generic metadata details across all namespaces for nodes [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                               {},
		"[sig-api-machinery] Servers with support for Table transformation should return chunks of table results for list calls [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                 {},
		"[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                            {},
		"[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                               {},
		"[sig-api-machinery] ServerSideApply should work for subresources [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                       {},
		"[sig-api-machinery] ServerSideApply should work for CRDs [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                               {},
		"[sig-api-machinery] ServerSideApply should remove a field if it is owned but removed in the apply request [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                              {},
		"[sig-api-machinery] ServerSideApply should not remove a field if an owner unsets the field but other managers still have ownership of the field [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                        {},
		"[sig-api-machinery] ServerSideApply should ignore conflict errors if force apply is used [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                               {},
		"[sig-api-machinery] ServerSideApply should give up ownership of a field if forced applied by a controller [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                              {},
		"[sig-api-machinery] ServerSideApply should create an applied object if it does not already exist [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                       {},
		"[sig-api-machinery] Server request timeout the request should be served with a default timeout if the specified timeout in the request URL exceeds maximum allowed [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                     {},
		"[sig-api-machinery] Server request timeout should return HTTP status code 400 if the user specifies an invalid timeout in the request URL [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                              {},
		"[sig-api-machinery] Server request timeout default timeout should be used if the specified timeout in the request URL is 0s [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                            {},
		"[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                           {},
		"[sig-api-machinery] ResourceQuota should verify ResourceQuota with cross namespace pod affinity scope using scope-selectors. [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                           {},
		"[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                            {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                    {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                               {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                           {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                   {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim with a storage class [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                 {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                      {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a custom resource. [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                             {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                             {},
		"[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                             {},
		"[sig-api-machinery] ResourceQuota [Feature:ScopeSelectors] should verify ResourceQuota with terminating scopes through scope selectors. [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                {},
		"[sig-api-machinery] ResourceQuota [Feature:ScopeSelectors] should verify ResourceQuota with best effort scope using scope-selectors. [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                   {},
		"[sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against a pod with same priority class. [Suite:openshift/conformance/parallel] [Suite:k8s]":                                         {},
		"[sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against a pod with different priority class (ScopeSelectorOpNotIn). [Suite:openshift/conformance/parallel] [Suite:k8s]":             {},
		"[sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against a pod with different priority class (ScopeSelectorOpExists). [Suite:openshift/conformance/parallel] [Suite:k8s]":            {},
		"[sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against 2 pods with same priority class. [Suite:openshift/conformance/parallel] [Suite:k8s]":                                        {},
		"[sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against 2 pods with different priority class. [Suite:openshift/conformance/parallel] [Suite:k8s]":                                   {},
		"[sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (cpu, memory quota set) against a pod with same priority class. [Suite:openshift/conformance/parallel] [Suite:k8s]":                                             {},
		"[sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's multiple priority class scope (quota set to pod count: 2) against 2 pods with same priority classes. [Suite:openshift/conformance/parallel] [Suite:k8s]":                             {},
		"[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                                                                   {},
		"[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                    {},
		"[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                        {},
		"[sig-api-machinery] Namespaces [Serial] should delete fast enough (90 percent of 100 namespaces in 150 seconds) [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                          {},
		"[sig-api-machinery] Namespaces [Serial] should always delete fast (ALL of 100 namespaces in 150 seconds) [Feature:ComprehensiveNamespaceDraining] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                        {},
		"[sig-api-machinery] Generated clientset should create v1 cronJobs, delete cronJobs, watch cronJobs [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                     {},
		"[sig-api-machinery] Generated clientset should create pods, set the deletionTimestamp and deletionGracePeriodSeconds of the pod [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                        {},
		"[sig-api-machinery] Garbage collector should support orphan deletion of custom resources [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                               {},
		"[sig-api-machinery] Garbage collector should support cascading deletion of custom resources [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                            {},
		"[sig-api-machinery] Garbage collector should orphan pods created by rc if deleteOptions.OrphanDependents is nil [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                        {},
		"[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                  {},
		"[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                      {},
		"[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                              {},
		"[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                 {},
		"[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                      {},
		"[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                        {},
		"[sig-api-machinery] Garbage collector should delete jobs and pods created by cronjob [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                   {},
		"[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                  {},
		"[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                 {},
		"[sig-api-machinery] Discovery Custom resource should have storage version hash [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                         {},
		"[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                      {},
		"[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                 {},
		"[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                               {},
		"[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]": {},
		"[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                     {},
		"[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                          {},
		"[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                      {},
		"[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                            {},
		"[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                 {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                   {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                 {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                               {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                        {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                       {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                     {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                           {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                           {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                              {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                 {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                              {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                              {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                  {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                           {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                             {},
		"[sig-api-machinery] API priority and fairness should ensure that requests can be classified by adding FlowSchema and PriorityLevelConfiguration [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                        {},
		"[sig-api-machinery] API data in etcd should be stored at the correct location and version for all resources [Serial] [Suite:openshift/conformance/serial]":                                                                                                                 {},
		"[install] [Suite: service-definition] [OSD] regularuser validating webhook regularuser validating webhook Privledged users allowed to create autoscalers and delete clusterversion objects":                                                                                {},
		"[install] [Suite: service-definition] [OSD] Privileged Containers Privileged containers are not allowed privileged container should not get created":                                                                                                                       {},
		"[install] [Suite: service-definition] [OSD] NodeLabels Modifying nodeLabels is not allowed node-label cannot be added":                                                                                                                                                     {},
		"[install] [Suite: service-definition] [OSD] DaemonSets DaemonSets are not allowed worker node daemonset should get created":                                                                                                                                                {},
		"[install] [Suite: service-definition] [OSD] DaemonSets DaemonSets are not allowed infra node daemonset should get created":                                                                                                                                                 {},
		"[install] [Suite: service-definition] [OSD] DaemonSets DaemonSets are not allowed empty node-label daemonset should get created":                                                                                                                                           {},
		"[install] [Suite: operators] [OSD] Splunk Forwarder Operator splunkforwarders admin should be able to manage SplunkForwarders CR":                                                                                                                                          {},
		"[install] [Suite: operators] [OSD] Splunk Forwarder Operator deployment should have all desired replicas ready":                                                                                                                                                            {},
		"[install] [Suite: operators] [OSD] Splunk Forwarder Operator deployment should exist":                                                                                                                                                                                      {},
		"[install] [Suite: operators] [OSD] Splunk Forwarder Operator configmaps should exist":                                                                                                                                                                                      {},
		"[install] [Suite: operators] [OSD] Splunk Forwarder Operator clusterServiceVersion openshift-splunk-forwarder-operator/splunk-forwarder-operator should be present and in succeeded state":                                                                                 {},
		"[install] [Suite: operators] [OSD] Splunk Forwarder Operator clusterRoles should exist":                                                                                                                                                                                    {},
		"[install] [Suite: operators] [OSD] Splunk Forwarder Operator clusterRoleBindings should exist":                                                                                                                                                                             {},
		"[install] [Suite: operators] [OSD] Splunk Forwarder Operator Operator Upgrade should upgrade from the replaced version":                                                                                                                                                    {},
		"[install] [Suite: operators] [OSD] RBAC Operator deployment should have all desired replicas ready":                                                                                                                                                                        {},
		"[install] [Suite: operators] [OSD] RBAC Operator deployment should exist":                                                                                                                                                                                                  {},
		"[install] [Suite: operators] [OSD] RBAC Operator configmaps should exist":                                                                                                                                                                                                  {},
		"[install] [Suite: operators] [OSD] RBAC Operator clusterServiceVersion openshift-rbac-permissions/rbac-permissions-operator should be present and in succeeded state":                                                                                                      {},
		"[install] [Suite: operators] [OSD] RBAC Operator clusterRoles should exist":                                                                                                                                                                                                {},
		"[install] [Suite: operators] [OSD] RBAC Operator Operator Upgrade should upgrade from the replaced version":                                                                                                                                                                {},
		"[install] [Suite: operators] [OSD] RBAC Dedicated Admins SubjectPermission SubjectPermission should have the expected ClusterRoles, ClusterRoleBindings and RoleBindinsg":                                                                                                  {},
		"[install] [Suite: operators] [OSD] Prune jobs pruner jobs should works deployments-pruner should run successfully":                                                                                                                                                         {},
		"[install] [Suite: operators] [OSD] Prune jobs pruner jobs should works builds-pruner should run successfully":                                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] OSD Metrics Exporter Basic Test service should exist":                                                                                                                                                                                   {},
		"[install] [Suite: operators] [OSD] OSD Metrics Exporter Basic Test deployment should have all desired replicas ready":                                                                                                                                                      {},
		"[install] [Suite: operators] [OSD] OSD Metrics Exporter Basic Test deployment should exist":                                                                                                                                                                                {},
		"[install] [Suite: operators] [OSD] OSD Metrics Exporter Basic Test clusterServiceVersion openshift-osd-metrics/osd-metrics-exporter should be present and in succeeded state":                                                                                              {},
		"[install] [Suite: operators] [OSD] OSD Metrics Exporter Basic Test clusterRoles should exist":                                                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] OSD Metrics Exporter Basic Test clusterRoleBindings should exist":                                                                                                                                                                       {},
		"[install] [Suite: operators] [OSD] OSD Metrics Exporter Basic Test Operator Upgrade should upgrade from the replaced version":                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] Must Gather Operator deployment should have all desired replicas ready":                                                                                                                                                                 {},
		"[install] [Suite: operators] [OSD] Must Gather Operator deployment should exist":                                                                                                                                                                                           {},
		"[install] [Suite: operators] [OSD] Must Gather Operator configmaps should exist":                                                                                                                                                                                           {},
		"[install] [Suite: operators] [OSD] Must Gather Operator clusterServiceVersion openshift-must-gather-operator/must-gather-operator should be present and in succeeded state":                                                                                                {},
		"[install] [Suite: operators] [OSD] Must Gather Operator clusterRoles should exist":                                                                                                                                                                                         {},
		"[install] [Suite: operators] [OSD] Must Gather Operator as an elevated SRE can manage MustGather CRs in openshift-must-gather-operator namespace":                                                                                                                          {},
		"[install] [Suite: operators] [OSD] Must Gather Operator as Members of CEE can manage MustGather CRs in openshift-must-gather-operator namespace":                                                                                                                           {},
		"[install] [Suite: operators] [OSD] Must Gather Operator Operator Upgrade should upgrade from the replaced version":                                                                                                                                                         {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero backups should be complete":                                                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit VolumeSnapshotLocations":                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit ServerStatusRequests":                                                                                                                                                 {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit Schedules":                                                                                                                                                            {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit RestricRepository":                                                                                                                                                    {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit Restore":                                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit PodVolumeRestores":                                                                                                                                                    {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit PodVolumeBackups":                                                                                                                                                     {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit DownloadRequests":                                                                                                                                                     {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit DeleteBackupRequests":                                                                                                                                                 {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit Backups":                                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be forbidden to edit BackupStorageLocations":                                                                                                                                               {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit VolumeSnapshotLocations":                                                                                                                                                {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit ServerStatusRequests":                                                                                                                                                   {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit Schedules":                                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit RestricRepository":                                                                                                                                                      {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit Restore":                                                                                                                                                                {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit PodVolumeRestores":                                                                                                                                                      {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit PodVolumeBackups":                                                                                                                                                       {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit DownloadRequests":                                                                                                                                                       {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit DeleteBackupRequests":                                                                                                                                                   {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit Backups":                                                                                                                                                                {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator velero Access should be allowed to edit BackupStorageLocations":                                                                                                                                                 {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator roles should exist":                                                                                                                                                                                             {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator roleBindings should exist":                                                                                                                                                                                      {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator deployment should have all desired replicas ready":                                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator deployment should exist":                                                                                                                                                                                        {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator configmaps should exist":                                                                                                                                                                                        {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator clusterRoles should exist":                                                                                                                                                                                      {},
		"[install] [Suite: operators] [OSD] Managed Velero Operator clusterRoleBindings should exist":                                                                                                                                                                               {},
		"[install] [Suite: operators] [OSD] Custom Domains Operator Should allow dedicated-admins to create custom domains Should be resolvable by external services":                                                                                                               {},
		"[install] [Suite: operators] [OSD] Configure AlertManager Operator serviceAccounts should exist":                                                                                                                                                                           {},
		"[install] [Suite: operators] [OSD] Configure AlertManager Operator roles with prefix should exist":                                                                                                                                                                         {},
		"[install] [Suite: operators] [OSD] Configure AlertManager Operator deployment should have all desired replicas ready":                                                                                                                                                      {},
		"[install] [Suite: operators] [OSD] Configure AlertManager Operator deployment should exist":                                                                                                                                                                                {},
		"[install] [Suite: operators] [OSD] Configure AlertManager Operator configmaps should exist":                                                                                                                                                                                {},
		"[install] [Suite: operators] [OSD] Configure AlertManager Operator clusterServiceVersion openshift-monitoring/configure-alertmanager-operator should be present and in succeeded state":                                                                                    {},
		"[install] [Suite: operators] [OSD] Configure AlertManager Operator clusterRoles should exist":                                                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] Configure AlertManager Operator clusterRoleBindings should exist":                                                                                                                                                                       {},
		"[install] [Suite: operators] [OSD] Configure AlertManager Operator Operator Upgrade should upgrade from the replaced version":                                                                                                                                              {},
		"[install] [Suite: operators] [OSD] Certman Operator certificate secret should be applied when cluster installed certificate secret should be applied to apiserver object":                                                                                                  {},
		"[install] [Suite: operators] [OSD] Certman Operator certificate secret should be applied when cluster installed certificate secret exist under openshift-config namespace":                                                                                                 {},
		"[install] [Suite: operators] CloudIngressOperator rh-api-test hostname should resolve":                                                                                                                                                                                     {},
		"[install] [Suite: operators] CloudIngressOperator rh-api-test cidr block changes should updated the service":                                                                                                                                                               {},
		"[install] [Suite: operators] CloudIngressOperator publishingstrategies dedicated admin should not be allowed to manage publishingstrategies CR":                                                                                                                            {},
		"[install] [Suite: operators] CloudIngressOperator publishingstrategies cluster admin should be allowed to manage publishingstrategies CR":                                                                                                                                  {},
		"[install] [Suite: operators] CloudIngressOperator deployment should have all desired replicas ready":                                                                                                                                                                       {},
		"[install] [Suite: operators] CloudIngressOperator deployment should exist":                                                                                                                                                                                                 {},
		"[install] [Suite: operators] CloudIngressOperator apischeme dedicated admin should not be allowed to manage apischemes CR":                                                                                                                                                 {},
		"[install] [Suite: operators] CloudIngressOperator apischeme cluster admin should be allowed to manage apischemes CR":                                                                                                                                                       {},
		"[install] [Suite: operators] CloudIngressOperator apischeme apischemes CR instance must be present on cluster":                                                                                                                                                             {},
		"[install] [Suite: operators] AlertmanagerInhibitions should exist":                                                                                                                                                                                                         {},
		"[install] [Suite: operators] AlertmanagerInhibitions inhibits ClusterOperatorDegraded":                                                                                                                                                                                     {},
		"[install] [Suite: e2e] [OSD] namespace validating webhook namespace validating webhook dedicated admins cannot manage privileged namespaces":                                                                                                                               {},
		"[install] [Suite: e2e] [OSD] namespace validating webhook namespace validating webhook Privileged users can manage all namespaces":                                                                                                                                         {},
		"[install] [Suite: e2e] [OSD] namespace validating webhook namespace validating webhook Non-privileged users cannot manage privileged namespaces":                                                                                                                           {},
		"[install] [Suite: e2e] [OSD] RBAC Dedicated Admins SCC permissions scc-test new SCC does not break pods":                                                                                                                                                                   {},
		"[install] [Suite: e2e] [OSD] RBAC Dedicated Admins SCC permissions Dedicated Admin permissions should include nonroot":                                                                                                                                                     {},
		"[install] [Suite: e2e] [OSD] RBAC Dedicated Admins SCC permissions Dedicated Admin permissions should include anyuid":                                                                                                                                                      {},
		"[install] [Suite: e2e] [OSD] RBAC Dedicated Admins SCC permissions Dedicated Admin permissions can create pods with SCCs":                                                                                                                                                  {},
		"[install] [Suite: e2e] [OSD] Prometheus Exporters should exist and be running in the cluster":                                                                                                                                                                              {},
		"[install] [Suite: e2e] [OSD] OCM Quay Fallback uses a quay mirror when quay is unavailable":                                                                                                                                                                                {},
		"[install] [Suite: e2e] [OSD] OCM Metrics do exist and are not empty":                                                                                                                                                                                                       {},
		"[install] [Suite: e2e] [OSD] HTTP Strict Transport Security Validating HTTP strict transport security should be set for openshift-monitoring OSD managed routes":                                                                                                           {},
		"[install] [Suite: e2e] [OSD] HTTP Strict Transport Security Validating HTTP strict transport security should be set for openshift-console OSD managed routes":                                                                                                              {},
		"[install] [Suite: e2e] Workload (redmine) should get created in the cluster":                                                                                                                                                                                               {},
		"[install] [Suite: e2e] Workload (guestbook) should get created in the cluster":                                                                                                                                                                                             {},
		"[install] [Suite: e2e] Validation Webhook should exist and be running in the cluster":                                                                                                                                                                                      {},
		"[install] [Suite: e2e] Storage storage create PVCs":                                                                                                                 {},
		"[install] [Suite: e2e] Storage sc-list should be able to be expanded":                                                                                               {},
		"[install] [Suite: e2e] Routes should be functioning for oauth":                                                                                                      {},
		"[install] [Suite: e2e] Routes should be functioning for Console":                                                                                                    {},
		"[install] [Suite: e2e] Routes should be created for oauth":                                                                                                          {},
		"[install] [Suite: e2e] Routes should be created for Console":                                                                                                        {},
		"[install] [Suite: e2e] Pods should not be Failed":                                                                                                                   {},
		"[install] [Suite: e2e] Pods should be Running or Succeeded":                                                                                                         {},
		"[install] [Suite: e2e] MachineHealthChecks worker MHC should exist":                                                                                                 {},
		"[install] [Suite: e2e] MachineHealthChecks should replace unhealthy nodes":                                                                                          {},
		"[install] [Suite: e2e] MachineHealthChecks infra MHC should exist":                                                                                                  {},
		"[install] [Suite: e2e] ImageStreams should exist in the cluster":                                                                                                    {},
		"[install] [Suite: e2e] Encrypted Storage in GCP clusters can be created by dedicated admins":                                                                        {},
		"[install] [Suite: e2e] Cluster state should include Prometheus data":                                                                                                {},
		"[install] [Suite: e2e] Cluster state should have no alerts":                                                                                                         {},
		"[install] [Suite: app-builds] OpenShift Application Build E2E should get created in the cluster":                                                                    {},
		"[bz-service-ca] clusteroperator/service-ca should not change condition/Degraded":                                                                                    {},
		"[bz-service-ca] clusteroperator/service-ca should not change condition/Available":                                                                                   {},
		"[bz-openshift-controller-manager] clusteroperator/openshift-controller-manager should not change condition/Degraded":                                                {},
		"[bz-openshift-controller-manager] clusteroperator/openshift-controller-manager should not change condition/Available":                                               {},
		"[bz-openshift-apiserver] clusteroperator/openshift-apiserver should not change condition/Degraded":                                                                  {},
		"[bz-openshift-apiserver] clusteroperator/openshift-apiserver should not change condition/Available":                                                                 {},
		"[bz-kube-storage-version-migrator] clusteroperator/kube-storage-version-migrator should not change condition/Degraded":                                              {},
		"[bz-kube-storage-version-migrator] clusteroperator/kube-storage-version-migrator should not change condition/Available":                                             {},
		"[bz-kube-scheduler] clusteroperator/kube-scheduler should not change condition/Degraded":                                                                            {},
		"[bz-kube-scheduler] clusteroperator/kube-scheduler should not change condition/Available":                                                                           {},
		"[bz-kube-controller-manager] clusteroperator/kube-controller-manager should not change condition/Degraded":                                                          {},
		"[bz-kube-controller-manager] clusteroperator/kube-controller-manager should not change condition/Available":                                                         {},
		"[bz-kube-apiserver] clusteroperator/kube-apiserver should not change condition/Degraded":                                                                            {},
		"[bz-kube-apiserver] clusteroperator/kube-apiserver should not change condition/Available":                                                                           {},
		"[bz-config-operator] clusteroperator/config-operator should not change condition/Degraded":                                                                          {},
		"[bz-config-operator] clusteroperator/config-operator should not change condition/Available":                                                                         {},
		"[bz-cluster-api] clusteroperator/cluster-api should not change condition/Degraded":                                                                                  {},
		"[bz-cluster-api] clusteroperator/cluster-api should not change condition/Available":                                                                                 {},
		"[bz-cloud-controller-manager] clusteroperator/cloud-controller-manager should not change condition/Degraded":                                                        {},
		"[bz-cloud-controller-manager] clusteroperator/cloud-controller-manager should not change condition/Available":                                                       {},
		"[bz-baremetal] clusteroperator/baremetal should not change condition/Degraded":                                                                                      {},
		"[bz-baremetal] clusteroperator/baremetal should not change condition/Available":                                                                                     {},
		"[bz-apiserver-auth] clusteroperator/authentication should not change condition/Degraded":                                                                            {},
		"[bz-apiserver-auth] clusteroperator/authentication should not change condition/Available":                                                                           {},
		"[bz-Storage] clusteroperator/storage should not change condition/Degraded":                                                                                          {},
		"[bz-Storage] clusteroperator/storage should not change condition/Available":                                                                                         {},
		"[bz-Storage] clusteroperator/csi-snapshot-controller should not change condition/Degraded":                                                                          {},
		"[bz-Storage] clusteroperator/csi-snapshot-controller should not change condition/Available":                                                                         {},
		"[bz-Samples] clusteroperator/openshift-samples should not change condition/Degraded":                                                                                {},
		"[bz-Samples] clusteroperator/openshift-samples should not change condition/Available":                                                                               {},
		"[bz-Routing] clusteroperator/ingress should not change condition/Degraded":                                                                                          {},
		"[bz-Routing] clusteroperator/ingress should not change condition/Available":                                                                                         {},
		"[bz-OLM] clusteroperator/operator-lifecycle-manager-packageserver should not change condition/Degraded":                                                             {},
		"[bz-OLM] clusteroperator/operator-lifecycle-manager-packageserver should not change condition/Available":                                                            {},
		"[bz-OLM] clusteroperator/operator-lifecycle-manager-catalog should not change condition/Degraded":                                                                   {},
		"[bz-OLM] clusteroperator/operator-lifecycle-manager-catalog should not change condition/Available":                                                                  {},
		"[bz-OLM] clusteroperator/operator-lifecycle-manager should not change condition/Degraded":                                                                           {},
		"[bz-OLM] clusteroperator/operator-lifecycle-manager should not change condition/Available":                                                                          {},
		"[bz-OLM] clusteroperator/marketplace should not change condition/Degraded":                                                                                          {},
		"[bz-OLM] clusteroperator/marketplace should not change condition/Available":                                                                                         {},
		"[bz-Node Tuning Operator] clusteroperator/node-tuning should not change condition/Degraded":                                                                         {},
		"[bz-Node Tuning Operator] clusteroperator/node-tuning should not change condition/Available":                                                                        {},
		"[bz-Networking] clusteroperator/network should not change condition/Degraded":                                                                                       {},
		"[bz-Networking] clusteroperator/network should not change condition/Available":                                                                                      {},
		"[bz-Monitoring] clusteroperator/monitoring should not change condition/Degraded":                                                                                    {},
		"[bz-Monitoring] clusteroperator/monitoring should not change condition/Available":                                                                                   {},
		"[bz-Management Console] clusteroperator/console should not change condition/Degraded":                                                                               {},
		"[bz-Management Console] clusteroperator/console should not change condition/Available":                                                                              {},
		"[bz-Machine Config Operator] clusteroperator/machine-config should not change condition/Degraded":                                                                   {},
		"[bz-Machine Config Operator] clusteroperator/machine-config should not change condition/Available":                                                                  {},
		"[bz-Insights Operator] clusteroperator/insights should not change condition/Degraded":                                                                               {},
		"[bz-Insights Operator] clusteroperator/insights should not change condition/Available":                                                                              {},
		"[bz-Image Registry] clusteroperator/image-registry should not change condition/Degraded":                                                                            {},
		"[bz-Image Registry] clusteroperator/image-registry should not change condition/Available":                                                                           {},
		"[bz-Etcd] clusteroperator/etcd should not change condition/Degraded":                                                                                                {},
		"[bz-Etcd] clusteroperator/etcd should not change condition/Available":                                                                                               {},
		"[bz-DNS] clusteroperator/dns should not change condition/Degraded":                                                                                                  {},
		"[bz-DNS] clusteroperator/dns should not change condition/Available":                                                                                                 {},
		"[bz-Cloud Credential Operator] clusteroperator/cloud-credential should not change condition/Degraded":                                                               {},
		"[bz-Cloud Credential Operator] clusteroperator/cloud-credential should not change condition/Available":                                                              {},
		"[bz-Cloud Compute] clusteroperator/machine-approver should not change condition/Degraded":                                                                           {},
		"[bz-Cloud Compute] clusteroperator/machine-approver should not change condition/Available":                                                                          {},
		"[bz-Cloud Compute] clusteroperator/machine-api should not change condition/Degraded":                                                                                {},
		"[bz-Cloud Compute] clusteroperator/machine-api should not change condition/Available":                                                                               {},
		"[bz-Cloud Compute] clusteroperator/cluster-autoscaler should not change condition/Degraded":                                                                         {},
		"[bz-Cloud Compute] clusteroperator/cluster-autoscaler should not change condition/Available":                                                                        {},
		"[Conformance][sig-sno][Serial] Cluster should allow a fast rollout of kube-apiserver [Suite:openshift/conformance/serial/minimal]":                                  {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  settings cluster":                                                                {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  search all-namespaces?kind=config.openshift.io~v1~Console":                       {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  monitoring query-browser":                                                        {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s ns openshift-monitoring monitoring.coreos.com~v1~Alertmanager main":          {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s ns openshift-machine-api machine.openshift.io~v1beta1~MachineSet":            {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s ns openshift-machine-api machine.openshift.io~v1beta1~MachineHealthCheck":    {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s ns openshift-machine-api machine.openshift.io~v1beta1~Machine":               {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s ns openshift-machine-api autoscaling.openshift.io~v1beta1~MachineAutoscaler": {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s cluster user.openshift.io~v1~User":                                           {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s cluster nodes":                                                               {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s cluster machineconfiguration.openshift.io~v1~MachineConfigPool":              {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s cluster machineconfiguration.openshift.io~v1~MachineConfig":                  {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s cluster clusterroles view":                                                   {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s all-namespaces monitoring.coreos.com~v1~Alertmanager":                        {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s all-namespaces import":                                                       {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  k8s all-namespaces events":                                                       {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  api-resource ns default core~v1~Pod schema":                                      {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  api-resource ns default core~v1~Pod instances":                                   {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  api-resource ns default core~v1~Pod access":                                      {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  api-resource ns default core~v1~Pod":                                             {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  api-explorer":                                                                    {},
		"Visiting other routes.Visiting other routes successfully displays view for route:  ":                                                                                {},
		"Using OLM descriptor components.Using OLM descriptor components successfully creates operand using form":                                                            {},
		"Using OLM descriptor components.Using OLM descriptor components pre-populates Select field":                                                                         {},
		"Using OLM descriptor components.Using OLM descriptor components pre-populates Password field":                                                                       {},
		"Using OLM descriptor components.Using OLM descriptor components pre-populates Number field":                                                                         {},
		"Using OLM descriptor components.Using OLM descriptor components pre-populates Name field":                                                                           {},
		"Using OLM descriptor components.Using OLM descriptor components pre-populates Labels field":                                                                         {},
		"Using OLM descriptor components.Using OLM descriptor components pre-populates Field Group":                                                                          {},
		"Using OLM descriptor components.Using OLM descriptor components pre-populates Array Field Group":                                                                    {},
		"Using OLM descriptor components.Using OLM descriptor components does not render hidden field group":                                                                 {},
		"Using OLM descriptor components.Using OLM descriptor components does not display status descriptor for Hidden":                                                      {},
		"Using OLM descriptor components.Using OLM descriptor components does not display spec descriptor for Hidden":                                                        {},
		"Using OLM descriptor components.Using OLM descriptor components displays status descriptor for W3 Link":                                                             {},
		"Using OLM descriptor components.Using OLM descriptor components displays status descriptor for Text":                                                                {},
		"Using OLM descriptor components.Using OLM descriptor components displays status descriptor for Prometheus Endpoint":                                                 {},
		"Using OLM descriptor components.Using OLM descriptor components displays status descriptor for Pod Statuses":                                                        {},
		"Using OLM descriptor components.Using OLM descriptor components displays status descriptor for Pod Count":                                                           {},
		"Using OLM descriptor components.Using OLM descriptor components displays status descriptor for Password":                                                            {},
		"Using OLM descriptor components.Using OLM descriptor components displays status descriptor for K8s Phase Reason":                                                    {},
		"Using OLM descriptor components.Using OLM descriptor components displays status descriptor for K8s Phase":                                                           {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Update Strategy":                                                       {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Text":                                                                  {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Resource Requirements":                                                 {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Pod Count":                                                             {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Pod Anti Affinity":                                                     {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Pod Affinity":                                                          {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Password":                                                              {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Number":                                                                {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Node Affinity":                                                         {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Namespace Selector":                                                    {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Label":                                                                 {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Image Pull Policy":                                                     {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Field Dependency":                                                      {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Endpoint List":                                                         {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Checkbox":                                                              {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Boolean Switch":                                                        {},
		"Using OLM descriptor components.Using OLM descriptor components displays spec descriptor for Advanced":                                                              {},
		"Using OLM descriptor components.Using OLM descriptor components displays list containing operands":                                                                  {},
		"Using OLM descriptor components.Using OLM descriptor components displays form for creating operand":                                                                 {},
		"Using OLM descriptor components.Using OLM descriptor components displays detail view for operand":                                                                   {},
		"Using OLM descriptor components.Using OLM descriptor components deletes operand":                                                                                    {},
		"Tests Suite.[sig-compute]Subresource Api [rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component] VirtualMachine subresource with a restart endpoint [test_id:2265][posneg:negative] should return an error when VM has not been found but VMI is running":                                                                                                                                            {},
		"Tests Suite.[sig-compute]Subresource Api [rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component] VirtualMachine subresource with a restart endpoint [test_id:1305][posneg:negative] should return an error when VM is not running":                                                                                                                                                                   {},
		"Tests Suite.[sig-compute]Subresource Api [rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component] VirtualMachine subresource with a restart endpoint [test_id:1304] should restart a VM":                                                                                                                                                                                                              {},
		"Tests Suite.[sig-compute]Subresource Api [rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component] VirtualMachine subresource With manual RunStrategy [test_id:3175]Should restart when VM is running":                                                                                                                                                                                                 {},
		"Tests Suite.[sig-compute]Subresource Api [rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component] VirtualMachine subresource With manual RunStrategy [test_id:3174]Should not restart when VM is not running":                                                                                                                                                                                         {},
		"Tests Suite.[sig-compute]Subresource Api [rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component] VirtualMachine subresource With RunStrategy RerunOnFailure [test_id:3176]Should restart the VM":                                                                                                                                                                                                     {},
		"Tests Suite.[rfe_id:588][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]ContainerDisk [rfe_id:273][crit:medium][vendor:cnv-qe@redhat.com][level:component]Starting with virtio-win with virtio-win as secondary disk [test_id:1467]should boot and have the virtio as sata CDROM":                                                                                                             {},
		"Tests Suite.[rfe_id:588][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]ContainerDisk [rfe_id:273][crit:medium][vendor:cnv-qe@redhat.com][level:component]Starting multiple VMIs with ephemeral registry disk [test_id:1465]should success":                                                                                                                                                   {},
		"Tests Suite.[rfe_id:588][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]ContainerDisk [rfe_id:273][crit:medium][vendor:cnv-qe@redhat.com][level:component]Starting from custom image location with disk at /custom-disk/downloaded [test_id:1466]should boot normally":                                                                                                                        {},
		"Tests Suite.[rfe_id:588][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]ContainerDisk [rfe_id:273][crit:medium][vendor:cnv-qe@redhat.com][level:component]Starting and stopping the same VirtualMachineInstance with ephemeral registry disk [test_id:1463][Conformance] should success multiple times":                                                                                       {},
		"Tests Suite.[rfe_id:588][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]ContainerDisk [rfe_id:273][crit:medium][vendor:cnv-qe@redhat.com][level:component]Starting a VirtualMachineInstance with ephemeral registry disk [test_id:1464]should not modify the spec on status update":                                                                                                           {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Get a VirtualMachineInstance when that not exist [test_id:1649]should return 404":                                                                                                                                                        {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Delete a VirtualMachineInstance's Pod [test_id:1650]should result in the VirtualMachineInstance moving to a finalized state":                                                                                                             {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Delete a VirtualMachineInstance with grace period greater than 0 [test_id:1655]should run graceful shutdown":                                                                                                                             {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Delete a VirtualMachineInstance with an active pod. [test_id:1651]should result in pod being terminated":                                                                                                                                 {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Delete a VirtualMachineInstance with ACPI and some grace period seconds [rfe_id:273][crit:medium][vendor:cnv-qe@redhat.com][level:component]should result in vmi status succeeded [test_id:1654]with default grace period seconds":       {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Delete a VirtualMachineInstance with ACPI and some grace period seconds [rfe_id:273][crit:medium][vendor:cnv-qe@redhat.com][level:component]should result in vmi status succeeded [test_id:1653]with set grace period seconds":           {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance with user-data without k8s secret [test_id:1630]should log warning and proceed once the secret is there":                                                                                               {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance with user-data without k8s secret [test_id:1629][posneg:negative]should not be able to start virt-launcher pod":                                                                                        {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance with non default namespace [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]should log libvirt start and stop lifecycle events of the domain [test_id:1642]kubevirt-test-alternative": {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance with non default namespace [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]should log libvirt start and stop lifecycle events of the domain [test_id:1641]kubevirt-test-default":     {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance with boot order [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]should be able to boot from selected disk [test_id:1628]Cirros as first boot":                                        {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance with boot order [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]should be able to boot from selected disk [test_id:1627]Alpine as first boot":                                        {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance with affinity [test_id:1638]the vmi with node affinity and anti-pod affinity should not be scheduled":                                                                                                  {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance with affinity [test_id:1637]the vmi with node affinity and no conflicts should be scheduled":                                                                                                           {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance when virt-launcher crashes [Serial][test_id:1631]should be stopped and have Failed phase":                                                                                                              {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance when name is longer than 63 characters [test_id:1625]should start it":                                                                                                                                  {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance when it already exist [test_id:1626]should be rejected":                                                                                                                                                {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:6095]should start in paused state if start strategy set to paused":                                                                                                                            {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:3197]should log libvirtd debug logs when enabled":                                                                                                                                             {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:3196]should carry kubernetes and kubevirt annotations to pod":                                                                                                                                 {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:3195]should carry annotations to pod":                                                                                                                                                         {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:1624]should reject PATCH if schema is invalid":                                                                                                                                                {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:1623]should reject POST if validation webhook deems the spec invalid":                                                                                                                         {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:1622]should log libvirtd logs":                                                                                                                                                                {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:1621]should attach virt-launcher to it":                                                                                                                                                       {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:1620]should start it":                                                                                                                                                                         {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [test_id:1619]should success":                                                                                                                                                                          {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with node tainted [test_id:1636]the vmi without tolerations should not be scheduled":                                                                                                           {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with node tainted [test_id:1635]the vmi with tolerations should be scheduled":                                                                                                                  {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with node feature discovery the vmi with HyperV feature matching a nfd label on a node should be scheduled":                                                                                    {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with node feature discovery the vmi with EVMCS HyperV feature should have correct hyperv and cpu features auto filled":                                                                         {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with node feature discovery [test_id:3204]the vmi with cpu.feature policy 'forbid' should not be scheduled on a node with that cpu feature label":                                              {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with node feature discovery [test_id:3202]the vmi with cpu.features matching nfd labels on a node should be scheduled":                                                                         {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with node feature discovery [test_id:1640]the vmi with cpu.model that cannot match an nfd label on node should not be scheduled":                                                               {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with node feature discovery [test_id:1639]the vmi with cpu.model matching a nfd label on a node should be scheduled":                                                                           {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with default cpu model [test_id:3200]should not set default cpu model when vmi has it set":                                                                                                     {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with default cpu model [test_id:3199]should set default cpu model when vmi doesn't have it set":                                                                                                {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]with default cpu model [sig-compute][test_id:3201]should not set cpu model when vmi does not have it set and default cpu model is not set":                                                     {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]when virt-handler is responsive [test_id:3198]device plugins should re-register if the kubelet restarts":                                                                                       {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]when virt-handler is responsive [test_id:1633]should indicate that a node is ready for vmis":                                                                                                   {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]when virt-handler is not responsive [test_id:1634]the node controller should mark the node as unschedulable when the virt-handler heartbeat has timedout":                                      {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance [Serial]when virt-handler crashes [test_id:1632]should recover and continue management":                                                                                                                {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance VM Accelerated Mode [test_id:1648]Should provide KVM via plugin framework":                                                                                                                             {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance VM Accelerated Mode [test_id:1647]should not enable emulation in virt-launcher":                                                                                                                        {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Creating a VirtualMachineInstance VM Accelerated Mode [test_id:1646]should request a KVM and TUN device":                                                                                                                                 {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [Serial][rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Killed VirtualMachineInstance [test_id:1657]should be left alone by virt-handler":                                                                                                                                                {},
		"Tests Suite.[rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]VMIlifecycle [Serial][rfe_id:273][crit:high][vendor:cnv-qe@redhat.com][level:component]Killed VirtualMachineInstance [test_id:1656]should be in Failed phase":                                                                                                                                                           {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitNoCloud userDataBase64 source with injected ssh-key [test_id:1616]should have ssh-key under authorized keys":                                                                          {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitNoCloud userDataBase64 source [test_id:1615]should have cloud-init data":                                                                                                              {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitNoCloud userData source [test_id:1617]should process provided cloud-init data":                                                                                                        {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitNoCloud networkData [test_id:3183]should have cloud-init network-config from k8s secret":                                                                                              {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitNoCloud networkData [test_id:3182]should have cloud-init network-config with NetworkDataBase64 source":                                                                                {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitNoCloud networkData [test_id:3181]should have cloud-init network-config with NetworkData source":                                                                                      {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitConfigDrive userDataBase64 source with injected ssh-key [test_id:3178]should have ssh-key under authorized keys":                                                                      {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitConfigDrive userDataBase64 source [test_id:3178]should have cloud-init data":                                                                                                          {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitConfigDrive userData source [test_id:3180]should process provided cloud-init data":                                                                                                    {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitConfigDrive networkData [test_id:4622]should have cloud-init meta_data with tagged devices":                                                                                           {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitConfigDrive networkData [test_id:3187]should have cloud-init userdata and network-config from separate k8s secrets with lowercase labels":                                             {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitConfigDrive networkData [test_id:3187]should have cloud-init userdata and network-config from separate k8s secrets with camelCase labels":                                             {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitConfigDrive networkData [test_id:3186]should have cloud-init network-config from k8s secret":                                                                                          {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitConfigDrive networkData [test_id:3185]should have cloud-init network-config with NetworkDataBase64 source":                                                                            {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance with cloudInitConfigDrive networkData [test_id:3184]should have cloud-init network-config with NetworkData source":                                                                                  {},
		"Tests Suite.[rfe_id:151][crit:high][vendor:cnv-qe@redhat.com][level:component][sig-compute]CloudInit UserData [rfe_id:151][crit:medium][vendor:cnv-qe@redhat.com][level:component]A new VirtualMachineInstance [test_id:1618]should take user-data from k8s secret":                                                                                                                                                {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [rfe_id:273]with oc/kubectl as ordinary OCP user trough test service account should succeed with right rights [test_id:2839]should create VM via command line":                                                                                                                                        {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [rfe_id:273]with oc/kubectl as ordinary OCP user trough test service account should fail without right rights [test_id:2914]should create VM via command line":                                                                                                                                        {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [rfe_id:273]with oc/kubectl [test_id:264]should create and delete via command line":                                                                                                                                                                                                                   {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [rfe_id:273]with oc/kubectl [test_id:243][posneg:negative]should create VM only once":                                                                                                                                                                                                                 {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [rfe_id:273]with oc/kubectl [test_id:233][posneg:negative]should fail when deleting nonexistent VM":                                                                                                                                                                                                   {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [rfe_id:273]with oc/kubectl [test_id:232]should create same manifest twice via command line":                                                                                                                                                                                                          {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [rfe_id:273]with oc/kubectl [release-blocker][test_id:299]should create VM via command line using all supported API versions with v1alpha3 api":                                                                                                                                                       {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [rfe_id:273]with oc/kubectl [release-blocker][test_id:299]should create VM via command line using all supported API versions with v1 api":                                                                                                                                                             {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [Serial]A mutated VirtualMachine given [test_id:3312]should set the default MachineType when created without explicit value":                                                                                                                                                                          {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine [Serial]A mutated VirtualMachine given [test_id:3311]should keep the supplied MachineType when created":                                                                                                                                                                                               {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine An invalid VirtualMachine given with a PVC from a Datavolume [sig-storage][test_id:4643]should NOT be rejected when VM template lists a DataVolume, but VM lists PVC VolumeSource":                                                                                                                    {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine An invalid VirtualMachine given [test_id:1519]should reject POST if validation webhoook deems the spec is invalid":                                                                                                                                                                                    {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine An invalid VirtualMachine given [test_id:1518]should be rejected on POST":                                                                                                                                                                                                                             {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given cpu/memory in requests/limits should allow int type":                                                                                                                                                                                                                     {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given cpu/memory in requests/limits should allow float type":                                                                                                                                                                                                                   {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:4645]should set the Ready condition on VM":                                                                                                                                                                                                                      {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:3162]should ignore kubernetes and kubevirt annotations to VMI":                                                                                                                                                                                                  {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:3161]should carry annotations to VMI":                                                                                                                                                                                                                           {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:1528]should survive guest shutdown, multiple times":                                                                                                                                                                                                             {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:1527]should not update the VirtualMachineInstance spec if Running":                                                                                                                                                                                              {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:1526]should start and stop VirtualMachineInstance multiple times":                                                                                                                                                                                               {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:1525]should stop VirtualMachineInstance if running set to false with ContainerDisk":                                                                                                                                                                             {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:1524]should recreate VirtualMachineInstance if the VirtualMachineInstance's pod gets deleted":                                                                                                                                                                   {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:1523]should recreate VirtualMachineInstance if it gets deleted":                                                                                                                                                                                                 {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:1522]should remove owner references on the VirtualMachineInstance if it is orphan deleted":                                                                                                                                                                      {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:1521]should remove VirtualMachineInstance once the VM is marked for deletion with ContainerDisk":                                                                                                                                                                {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given [test_id:1520]should update VirtualMachine once VMIs are up with ContainerDisk":                                                                                                                                                                                          {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface [test_id:3007]Should force restart a VM with terminationGracePeriodSeconds>0":                                                                                                                                                                    {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface [test_id:1529]should start a VirtualMachineInstance once":                                                                                                                                                                                        {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyRerunOnFailure [test_id:2188] should not remove a succeeded VMI":                                                                                                                                                                {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyRerunOnFailure [test_id:2187] should restart a running VM":                                                                                                                                                                      {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyRerunOnFailure [test_id:2186] should stop a running VM":                                                                                                                                                                         {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyManual [test_id:2190] should not remove a succeeded VMI":                                                                                                                                                                        {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyManual [test_id:2189] should stop":                                                                                                                                                                                              {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyManual [test_id:2036] should start":                                                                                                                                                                                             {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyManual [test_id:2035] should restart":                                                                                                                                                                                           {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyHalted [test_id:2037] should start a stopped VM":                                                                                                                                                                                {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyAlways [test_id:4119]should migrate a running VM":                                                                                                                                                                               {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyAlways [test_id:3165]should restart a succeeded VMI":                                                                                                                                                                            {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyAlways [test_id:3164]should restart a running VM":                                                                                                                                                                               {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Using RunStrategyAlways [test_id:3163]should stop a running VM":                                                                                                                                                                                  {},
		"Tests Suite.[rfe_id:1177][crit:medium][vendor:cnv-qe@redhat.com][level:component][sig-compute]VirtualMachine A valid VirtualMachine given Using virtctl interface Should force stop a VMI":                                                                                                                                                                                                                         {},
		"Testing uninstall of Red Hat CodeReady Workspaces Operator.Testing uninstall of Red Hat CodeReady Workspaces Operator successfully uninstalls Operator and deletes all Operands":                                                                                                                                                                                                                                   {},
		"Testing uninstall of Red Hat CodeReady Workspaces Operator.Testing uninstall of Red Hat CodeReady Workspaces Operator installs Red Hat CodeReady Workspaces Operator and CodeReady Workspaces Cluster Instance, then navigates to Operator details page":                                                                                                                                                           {},
		"Testing uninstall of Red Hat CodeReady Workspaces Operator.Testing uninstall of Red Hat CodeReady Workspaces Operator attempts to uninstall the Operator, shows 'Error uninstalling Operator' alert":                                                                                                                                                                                                               {},
		"Testing uninstall of Red Hat CodeReady Workspaces Operator.Testing uninstall of Red Hat CodeReady Workspaces Operator attempts to uninstall the Operator, shows 'Cannot load Operands' alert":                                                                                                                                                                                                                      {},
		"Testing uninstall of Red Hat CodeReady Workspaces Operator.Testing uninstall of Red Hat CodeReady Workspaces Operator attempts to uninstall the Operator and delete all Operand Instances, shows 'Error Deleting Operands' alert":                                                                                                                                                                                  {},
		"Testing haproxy router.haproxy config information should be clean when changing the service to another route":                                                                                                                                                                                                                                                                                                      {},
		"Testing haproxy router.can set cookie name for reencrypt routes by annotation":                                                                                                 {},
		"Testing haproxy router.The router pod should have default resource limits":                                                                                                     {},
		"Testing haproxy router.The backend health check interval of reencrypt route can be set by annotation":                                                                          {},
		"Testing haproxy router.The backend health check interval of passthrough route can be set by annotation":                                                                        {},
		"Testing haproxy router.The 'headerBufferBytes' and 'headerBufferMaxRewriteBytes' strictly honours the default minimum values during ingrescontroller deployment":               {},
		"Testing haproxy router.The \"tune.maxrewrite\" value for haproxy router can be modified with \"headerBufferMaxRewriteBytes\" ingresscontroller parameter":                      {},
		"Testing haproxy router.The \"tune.bufsize\" value for haproxy router can be modified with \"headerBufferBytes\" ingresscontroller parameter":                                   {},
		"Testing haproxy router.The \"tune.bufsize\" and \"tune.maxwrite\" values can be defined per haproxy router basis":                                                              {},
		"Testing haproxy router.Protect from ddos by limiting TCP concurrent connection for route":                                                                                      {},
		"Testing haproxy router.No health check when there is only one endpoint for a route":                                                                                            {},
		"Testing haproxy router.Health check when there are multi service and each service has one backend":                                                                             {},
		"Testing haproxy router.Disable haproxy hash based sticky session for edge termination routes":                                                                                  {},
		"Testing haproxy router.\"ingress.operator.openshift.io/hard-stop-after\" annotation can be applied on per ingresscontroller basis":                                             {},
		"Testing abrouting.The passthrough route with multiple service will set load balance policy to RoundRobin by default":                                                           {},
		"Testing abrouting.Set max backends weight for ab routing":                                                                                                                      {},
		"Testing abrouting.Endpoint will end up weight 1 when scaled weight per endpoint is less than 1":                                                                                {},
		"Testing abrouting.Each endpoint gets weight/numberOfEndpoints portion of the requests - edge route":                                                                            {},
		"Testing abrouting.Could not set more than 3 additional backends for route":                                                                                                     {},
		"Testing HTTP Headers related scenarios.HTTP request header cases adjustments only gets applied for routes with \"haproxy.router.openshift.io/h1-adjust-case=true\" annotation": {},
		"Testing HTTP Headers related scenarios.HTTP header case using \"headerNameCaseAdjustments\" parameter cannot be modified for the passthrough routes.":                          {},
		"Testing HTTP Headers related scenarios.HTTP header case can be modified with \"headerNameCaseAdjustments\" ingresscontroller parameter for unsecure/REEN/Edge routes":          {},
		"Testing DNS features.integrate DNS operator metrics with Prometheus":                                                                                                           {},
		"Testing DNS features.Integrate coredns metrics with monitoring component":                                                                                                      {},
		"Testing DNS features.Hostname lookup does not delay when master node down":                                                                                                     {},
		"Testing DNS features.DNS can resolve the external domain":                                                                                                                      {},
		"Testing DNS features.DNS can resolve the ExternalName services":                                                                                                                {},
		"Testing DNS features.DNS can resolve the ClusterIP services":                                                                                                                   {},
		"Testing DNS features.CoreDNS has been upgraded to v1.8.z for OCP4.8 or higher":                                                                                                 {},
		"Testing DNS features.CoreDNS cache should use 900s for positive responses and 30s for negative responses":                                                                      {},
		"Test perspective query parameters.Test perspective query parameters tests Developer query parameter":                                                                           {},
		"Test perspective query parameters.Test perspective query parameters tests Administrator query parameter":                                                                       {},
		"Symptom Detection.Undiagnosed panic detected in journal":                                                                                                                       {},
		"Symptom Detection.Infrastructure - GCP quota exceeded (route to forum-gcp)":                                                                                                    {},
		"Symptom Detection.Infrastructure - AWS simulate policy rate-limit":                                                                                                             {},
		"Symptom Detection.Bug 1812261: iptables is segfaulting":                                                                                                                        {},
		"StorageClass.Kubernetes resource CRUD operations StorageClass search view displays created resource instance":                                                                  {},
		"StorageClass.Kubernetes resource CRUD operations StorageClass edits the resource instance":                                                                                     {},
		"StorageClass.Kubernetes resource CRUD operations StorageClass displays detail view for newly created resource instance":                                                        {},
		"StorageClass.Kubernetes resource CRUD operations StorageClass displays a list view for the resource":                                                                           {},
		"StorageClass.Kubernetes resource CRUD operations StorageClass deletes the resource instance":                                                                                   {},
		"StorageClass.Kubernetes resource CRUD operations StorageClass creates the resource instance":                                                                                   {},
		"StatefulSets.Visiting Overview page StatefulSets shows statefulset details sidebar when item is clicked":                                                                       {},
		"StatefulSets.Visiting Overview page StatefulSets displays a statefulset in the overview list page":                                                                             {},
		"StatefulSet.Kubernetes resource CRUD operations StatefulSet search view displays created resource instance":                                                                    {},
		"StatefulSet.Kubernetes resource CRUD operations StatefulSet edits the resource instance":                                                                                       {},
		"StatefulSet.Kubernetes resource CRUD operations StatefulSet displays detail view for newly created resource instance":                                                          {},
		"StatefulSet.Kubernetes resource CRUD operations StatefulSet displays a list view for the resource":                                                                             {},
		"StatefulSet.Kubernetes resource CRUD operations StatefulSet deletes the resource instance":                                                                                     {},
		"StatefulSet.Kubernetes resource CRUD operations StatefulSet creates the resource instance":                                                                                     {},
		"Skipping Snapshot Tests.Skipping Snapshot Tests No CSI based storage classes are available in this platform":                                                                   {},
		"Skipping Clone Tests.Skipping Clone Tests No CSI based storage classes are available in this platform":                                                                         {},
		"ServiceAccount.Kubernetes resource CRUD operations ServiceAccount search view displays created resource instance":                                                              {},
		"ServiceAccount.Kubernetes resource CRUD operations ServiceAccount edits the resource instance":                                                                                 {},
		"ServiceAccount.Kubernetes resource CRUD operations ServiceAccount displays detail view for newly created resource instance":                                                    {},
		"ServiceAccount.Kubernetes resource CRUD operations ServiceAccount displays a list view for the resource":                                                                       {},
		"ServiceAccount.Kubernetes resource CRUD operations ServiceAccount deletes the resource instance":                                                                               {},
		"ServiceAccount.Kubernetes resource CRUD operations ServiceAccount creates the resource instance":                                                                               {},
		"Service.Kubernetes resource CRUD operations Service search view displays created resource instance":                                                                            {},
		"Service.Kubernetes resource CRUD operations Service edits the resource instance":                                                                                               {},
		"Service.Kubernetes resource CRUD operations Service displays detail view for newly created resource instance":                                                                  {},
		"Service.Kubernetes resource CRUD operations Service displays a list view for the resource":                                                                                     {},
		"Service.Kubernetes resource CRUD operations Service deletes the resource instance":                                                                                             {},
		"Service.Kubernetes resource CRUD operations Service creates the resource instance":                                                                                             {},
		"Secret.Kubernetes resource CRUD operations Secret search view displays created resource instance":                                                                              {},
		"Secret.Kubernetes resource CRUD operations Secret edits the resource instance":                                                                                                 {},
		"Secret.Kubernetes resource CRUD operations Secret displays detail view for newly created resource instance":                                                                    {},
		"Secret.Kubernetes resource CRUD operations Secret displays a list view for the resource":                                                                                       {},
		"Secret.Kubernetes resource CRUD operations Secret deletes the resource instance":                                                                                               {},
		"Secret.Kubernetes resource CRUD operations Secret creates the resource instance":                                                                                               {},
		"SCC policy related scenarios.pod should only be created with SC UID in the available range with the SCC restricted.":                                                           {},
		"SCC policy related scenarios.[platformmanagement_public_586] Check if the capabilities work in pods":                                                                           {},
		"SCC policy related scenarios.The SCC will take effect only when the user request the SC in the pod":                                                                            {},
		"SCC policy related scenarios.OpenShift SCC check, empty seccomp":                                                                                                               {},
		"SCC policy related scenarios.OpenShift SCC check, all seccomp allowed":                                                                                                         {},
		"SCC policy related scenarios.Create pod with request capabilities conflict with the scc":                                                                                       {},
		"SCC policy related scenarios.4.x User can know which serviceaccount and SA groups can create the podspec against the current sccs":                                             {},
		"Route.Kubernetes resource CRUD operations Route search view displays created resource instance":                                                                                {},
		"Route.Kubernetes resource CRUD operations Route edits the resource instance":                                                                                                   {},
		"Route.Kubernetes resource CRUD operations Route displays detail view for newly created resource instance":                                                                      {},
		"Route.Kubernetes resource CRUD operations Route displays a list view for the resource":                                                                                         {},
		"Route.Kubernetes resource CRUD operations Route deletes the resource instance":                                                                                                 {},
		"Route.Kubernetes resource CRUD operations Route creates the resource instance":                                                                                                 {},
		"Roles and RoleBindings.Roles and RoleBindings test Roles detail page breadcrumbs to list page restores last selected project":                                                  {},
		"Roles and RoleBindings.Roles and RoleBindings test Roles detail page breadcrumbs to list page restores 'All Projects' dropdown":                                                {},
		"Roles and RoleBindings.Roles and RoleBindings test RoleBindings detail page breadcrumbs to list page restores last selected project":                                           {},
		"Roles and RoleBindings.Roles and RoleBindings test RoleBindings detail page breadcrumbs to list page restores 'All Projects' dropdown":                                         {},
		"Roles and RoleBindings.Roles and RoleBindings test ClusterRoles detail page breadcrumbs to list page restores last selected project":                                           {},
		"Roles and RoleBindings.Roles and RoleBindings test ClusterRoles detail page breadcrumbs to list page restores 'All Projects' dropdown":                                         {},
		"Roles and RoleBindings.Roles and RoleBindings test ClusterRoleBindings detail page breadcrumbs to list page restores last selected project":                                    {},
		"Roles and RoleBindings.Roles and RoleBindings test ClusterRoleBindings detail page breadcrumbs to list page restores 'All Projects' dropdown":                                  {},
		"Role.Kubernetes resource CRUD operations Role search view displays created resource instance":                                                                                  {},
		"Role.Kubernetes resource CRUD operations Role edits the resource instance":                                                                                                     {},
		"Role.Kubernetes resource CRUD operations Role displays detail view for newly created resource instance":                                                                        {},
		"Role.Kubernetes resource CRUD operations Role displays a list view for the resource":                                                                                           {},
		"Role.Kubernetes resource CRUD operations Role deletes the resource instance":                                                                                                   {},
		"Role.Kubernetes resource CRUD operations Role creates the resource instance":                                                                                                   {},
		"ResourceQuota.Kubernetes resource CRUD operations ResourceQuota search view displays created resource instance":                                                                {},
		"ResourceQuota.Kubernetes resource CRUD operations ResourceQuota edits the resource instance":                                                                                   {},
		"ResourceQuota.Kubernetes resource CRUD operations ResourceQuota displays detail view for newly created resource instance":                                                      {},
		"ResourceQuota.Kubernetes resource CRUD operations ResourceQuota displays a list view for the resource":                                                                         {},
		"ResourceQuota.Kubernetes resource CRUD operations ResourceQuota deletes the resource instance":                                                                                 {},
		"ResourceQuota.Kubernetes resource CRUD operations ResourceQuota creates the resource instance":                                                                                 {},
		"ResourceQuata for storage.Setting quota for a StorageClass":                                                                                                                    {},
		"ResourceQuata for storage.Requested storage can not exceed the namespace's storage quota":                                                                                      {},
		"ReplicationController.Kubernetes resource CRUD operations ReplicationController search view displays created resource instance":                                                {},
		"ReplicationController.Kubernetes resource CRUD operations ReplicationController edits the resource instance":                                                                   {},
		"ReplicationController.Kubernetes resource CRUD operations ReplicationController displays detail view for newly created resource instance":                                      {},
		"ReplicationController.Kubernetes resource CRUD operations ReplicationController displays a list view for the resource":                                                         {},
		"ReplicationController.Kubernetes resource CRUD operations ReplicationController deletes the resource instance":                                                                 {},
		"ReplicationController.Kubernetes resource CRUD operations ReplicationController creates the resource instance":                                                                 {},
		"ReplicaSet.Kubernetes resource CRUD operations ReplicaSet search view displays created resource instance":                                                                      {},
		"ReplicaSet.Kubernetes resource CRUD operations ReplicaSet edits the resource instance":                                                                                         {},
		"ReplicaSet.Kubernetes resource CRUD operations ReplicaSet displays detail view for newly created resource instance":                                                            {},
		"ReplicaSet.Kubernetes resource CRUD operations ReplicaSet displays a list view for the resource":                                                                               {},
		"ReplicaSet.Kubernetes resource CRUD operations ReplicaSet deletes the resource instance":                                                                                       {},
		"ReplicaSet.Kubernetes resource CRUD operations ReplicaSet creates the resource instance":                                                                                       {},
		"Regression testing cases.RWO volumes are exclusively mounted on different nodes":                                                                                               {},
		"Regression testing cases.Check the binary files and selinux setting used by storage":                                                                                           {},
		"Quota related scenarios.check QoS Tier Guaranteed":                                                                                                                             {},
		"Quota related scenarios.check QoS Tier Burstable":                                                                                                                              {},
		"Quota related scenarios.check QoS Tier BestEffort":                                                                                                                             {},
		"Quota related scenarios.Precious resources should be restrained if they are covered in quota and not configured on the master":                                                 {},
		"Quota related scenarios.Precious resources should be consumed without constraint in the absence of a covering quota if they are not configured on the master":                  {},
		"Quota related scenarios.Admin can restrict the ability to use services.nodeports":                                                                                              {},
		"Quorum Loss and Restore.service-upgrade":                                                                                                                                       {},
		"Quorum Loss and Restore.quorum_restore":                                                                                                                                        {},
		"Quorum Loss and Restore.[sig-storage] [sig-api-machinery] secret-upgrade":                                                                                                      {},
		"Quorum Loss and Restore.[sig-apps] statefulset-upgrade":                                                                                                                        {},
		"Quorum Loss and Restore.[sig-apps] replicaset-upgrade":                                                                                                                         {},
		"Quorum Loss and Restore.[sig-apps] deployment-upgrade":                                                                                                                         {},
		"Quorum Loss and Restore.[sig-apps] daemonset-upgrade":                                                                                                                          {},
		"Project Dashboard.Utilization Card.has duration dropdown":                                                                                                                      {},
		"Project Dashboard.Utilization Card.has all items":                                                                                                                              {},
		"Project Dashboard.Status Card.has health indicator":                                                                                                                            {},
		"Project Dashboard.Resource Quotas Card.shows Resource Quotas":                                                                                                                  {},
		"Project Dashboard.Launcher Card.is displayed when CR exists":                                                                                                                   {},
		"Project Dashboard.Inventory Card.has all items":                                                                                                                                {},
		"Project Dashboard.Details Card.has all fields populated":                                                                                                                       {},
		"Project Dashboard.Details Card.has View all link":                                                                                                                              {},
		"Project Dashboard.Dashboard is default details page":                                                                                                                           {},
		"Project Dashboard.Activity Card.has View events link":                                                                                                                          {},
		"Project Dashboard.Activity Card.has Pause events button":                                                                                                                       {},
		"Pod.Kubernetes resource CRUD operations Pod search view displays created resource instance":                                                                                    {},
		"Pod.Kubernetes resource CRUD operations Pod edits the resource instance":                                                                                                       {},
		"Pod.Kubernetes resource CRUD operations Pod displays detail view for newly created resource instance":                                                                          {},
		"Pod.Kubernetes resource CRUD operations Pod displays a list view for the resource":                                                                                             {},
		"Pod.Kubernetes resource CRUD operations Pod deletes the resource instance":                                                                                                     {},
		"Pod.Kubernetes resource CRUD operations Pod creates the resource instance":                                                                                                     {},
		"PersistentVolumeClaim.Kubernetes resource CRUD operations PersistentVolumeClaim search view displays created resource instance":                                                {},
		"PersistentVolumeClaim.Kubernetes resource CRUD operations PersistentVolumeClaim edits the resource instance":                                                                   {},
		"PersistentVolumeClaim.Kubernetes resource CRUD operations PersistentVolumeClaim displays detail view for newly created resource instance":                                      {},
		"PersistentVolumeClaim.Kubernetes resource CRUD operations PersistentVolumeClaim displays a list view for the resource":                                                         {},
		"PersistentVolumeClaim.Kubernetes resource CRUD operations PersistentVolumeClaim deletes the resource instance":                                                                 {},
		"PersistentVolumeClaim.Kubernetes resource CRUD operations PersistentVolumeClaim creates the resource instance":                                                                 {},
		"PersistentVolume.Kubernetes resource CRUD operations PersistentVolume search view displays created resource instance":                                                          {},
		"PersistentVolume.Kubernetes resource CRUD operations PersistentVolume edits the resource instance":                                                                             {},
		"PersistentVolume.Kubernetes resource CRUD operations PersistentVolume displays detail view for newly created resource instance":                                                {},
		"PersistentVolume.Kubernetes resource CRUD operations PersistentVolume displays a list view for the resource":                                                                   {},
		"PersistentVolume.Kubernetes resource CRUD operations PersistentVolume deletes the resource instance":                                                                           {},
		"PersistentVolume.Kubernetes resource CRUD operations PersistentVolume creates the resource instance":                                                                           {},
		"Operator upgrade storage":                                  {},
		"Operator upgrade service-ca":                               {},
		"Operator upgrade operator-lifecycle-manager-packageserver": {},
		"Operator upgrade operator-lifecycle-manager-catalog":       {},
		"Operator upgrade operator-lifecycle-manager":               {},
		"Operator upgrade openshift-samples":                        {},
		"Operator upgrade openshift-controller-manager":             {},
		"Operator upgrade node-tuning":                              {},
		"Operator upgrade marketplace":                              {},
		"Operator upgrade machine-approver":                         {},
		"Operator upgrade kube-storage-version-migrator":            {},
		"Operator upgrade kube-scheduler":                           {},
		"Operator upgrade kube-apiserver":                           {},
		"Operator upgrade insights":                                 {},
		"Operator upgrade dns":                                      {},
		"Operator upgrade csi-snapshot-controller":                  {},
		"Operator upgrade console":                                  {},
		"Operator upgrade config-operator":                          {},
		"Operator upgrade cluster-autoscaler":                       {},
		"Operator upgrade cloud-credential":                         {},
		"Operator upgrade cloud-controller-manager":                 {},
		"Operator upgrade baremetal":                                {},
		"Operator related networking scenarios.The clusteroperator should be able to reflect the network operator version corresponding to the OCP version": {},
		"Operator related networking scenarios.Should have a clusteroperator object created under config.openshift.io api group for network-operator":       {},
		"Node management.check hooks_dir in crio conf file":                                                                                                         {},
		"Node management.[BZ1817568]Liveness probe exec check should succeed":                                                                                       {},
		"Node management.NodeStatus and PodStatus show correct imageID while pulling by digests - 4.x":                                                              {},
		"NetworkPolicy.Kubernetes resource CRUD operations NetworkPolicy search view displays created resource instance":                                            {},
		"NetworkPolicy.Kubernetes resource CRUD operations NetworkPolicy edits the resource instance":                                                               {},
		"NetworkPolicy.Kubernetes resource CRUD operations NetworkPolicy displays detail view for newly created resource instance":                                  {},
		"NetworkPolicy.Kubernetes resource CRUD operations NetworkPolicy displays a list view for the resource":                                                     {},
		"NetworkPolicy.Kubernetes resource CRUD operations NetworkPolicy deletes the resource instance":                                                             {},
		"NetworkPolicy.Kubernetes resource CRUD operations NetworkPolicy creates the resource instance":                                                             {},
		"Namespace.Namespace lists, creates, and deletes":                                                                                                           {},
		"Namespace.Namespace Nav and breadcrumbs restores last selected project when navigating from details to list view":                                          {},
		"Namespace.Namespace Nav and breadcrumbs restores last selected \"All Projects\" when navigating from details to list view":                                 {},
		"Multus-CNI related scenarios.Create pod with Multus bridge CNI plugin without vlan":                                                                        {},
		"Monitoring: Alerts.Monitoring: Alerts displays and filters the Alerts list page, links to detail pages":                                                    {},
		"Monitoring: Alerts.Monitoring: Alerts creates and expires a Silence":                                                                                       {},
		"Machine features testing.Metrics is exposed on https (outline example : | https://machine-approver.openshift-cluster-machine-approver.svc:9192/metrics |)": {},
		"Machine features testing.Metrics is exposed on https (outline example : | https://machine-api-operator.openshift-machine-api.svc:8443/metrics |)":          {},
		"Machine features testing.Metrics is exposed on https (outline example : | https://cluster-autoscaler-operator.openshift-machine-api.svc:9192/metrics |)":   {},
		"Machine features testing.Machines should be linked to nodes":                                                                                               {},
		"Machine features testing.Baremetal clusteroperator should be disabled in any deployment that is not baremetal":                                             {},
		"Localization.Localization pseudolocalizes utilization card":                                                                                                {},
		"Localization.Localization pseudolocalizes navigation":                                                                                                      {},
		"Localization.Localization pseudolocalizes monitoring pages":                                                                                                {},
		"Localization.Localization pseudolocalizes masthead":                                                                                                        {},
		"Localization.Localization pseudolocalizes activity card":                                                                                                   {},
		"LimitRange.Kubernetes resource CRUD operations LimitRange search view displays created resource instance":                                                  {},
		"LimitRange.Kubernetes resource CRUD operations LimitRange edits the resource instance":                                                                     {},
		"LimitRange.Kubernetes resource CRUD operations LimitRange displays detail view for newly created resource instance":                                        {},
		"LimitRange.Kubernetes resource CRUD operations LimitRange displays a list view for the resource":                                                           {},
		"LimitRange.Kubernetes resource CRUD operations LimitRange deletes the resource instance":                                                                   {},
		"LimitRange.Kubernetes resource CRUD operations LimitRange creates the resource instance":                                                                   {},
		"Job.Kubernetes resource CRUD operations Job search view displays created resource instance":                                                                {},
		"Job.Kubernetes resource CRUD operations Job edits the resource instance":                                                                                   {},
		"Job.Kubernetes resource CRUD operations Job displays detail view for newly created resource instance":                                                      {},
		"Job.Kubernetes resource CRUD operations Job displays a list view for the resource":                                                                         {},
		"Job.Kubernetes resource CRUD operations Job deletes the resource instance":                                                                                 {},
		"Job.Kubernetes resource CRUD operations Job creates the resource instance":                                                                                 {},
		"Interacting with the environment variable editor.When a variable is deleted.does not show any variables":                                                   {},
		"Interacting with the environment variable editor.When a variable is deleted from a secret.shows the correct variables":                                     {},
		"Interacting with the environment variable editor.When a variable is deleted from a config map.shows the correct variables":                                 {},
		"Interacting with the environment variable editor.When a variable is added.shows the correct variables":                                                     {},
		"Interacting with the environment variable editor.When a variable is added from a secret.shows the correct variables":                                       {},
		"Interacting with the environment variable editor.When a variable is added from a config map.shows the correct variables":                                   {},
		"Interacting with the create secret forms.Webhook secret.edits webhook secret":                                                                              {},
		"Interacting with the create secret forms.Webhook secret.deletes the webhook secret":                                                                        {},
		"Interacting with the create secret forms.Webhook secret.creates webhook secret":                                                                            {},
		"Interacting with the create secret forms.Webhook secret.check for edited webhook secret value":                                                             {},
		"Interacting with the create secret forms.Webhook secret.check for created webhook secret value":                                                            {},
		"Interacting with the create secret forms.Upload configuration file image secret.deletes the image secret created from uploaded configuration file":         {},
		"Interacting with the create secret forms.Upload configuration file image secret.creates image secret by uploading configuration file":                      {},
		"Interacting with the create secret forms.Upload configuration file image secret.check for created image secret values from uploaded configuration file":    {},
		"Interacting with the create secret forms.SSH source secrets.edits SSH source secret":                                                                       {},
		"Interacting with the create secret forms.SSH source secrets.deletes the SSH source secret":                                                                 {},
		"Interacting with the create secret forms.SSH source secrets.creates SSH source secret":                                                                     {},
		"Interacting with the create secret forms.SSH source secrets.check for edited SSH source secret values":                                                     {},
		"Interacting with the create secret forms.SSH source secrets.check for created SSH source secret values":                                                    {},
		"Interacting with the create secret forms.Registry credentials image secrets.edits registry credentials image secret":                                       {},
		"Interacting with the create secret forms.Registry credentials image secrets.deletes the registry credentials image secret":                                 {},
		"Interacting with the create secret forms.Registry credentials image secrets.creates registry credentials image secret":                                     {},
		"Interacting with the create secret forms.Registry credentials image secrets.check for edited registry credentials image secret value":                      {},
		"Interacting with the create secret forms.Registry credentials image secrets.check for created registry credentials image secret values":                    {},
		"Interacting with the create secret forms.Key/Value secrets.edits Key/Value secret":                                                                         {},
		"Interacting with the create secret forms.Key/Value secrets.deletes the Key/Value secret":                                                                   {},
		"Interacting with the create secret forms.Key/Value secrets.creates Key/Value secret":                                                                       {},
		"Interacting with the create secret forms.Key/Value secrets.check for edited Key/Value secret values":                                                       {},
		"Interacting with the create secret forms.Key/Value secrets.check for created Key/Value secret values":                                                      {},
		"Interacting with the create secret forms.Basic source secrets.edits basic source secret":                                                                   {},
		"Interacting with the create secret forms.Basic source secrets.deletes the basic source secret":                                                             {},
		"Interacting with the create secret forms.Basic source secrets.creates basic source secret":                                                                 {},
		"Interacting with the create secret forms.Basic source secrets.check for edited basic source secret values":                                                 {},
		"Interacting with the create secret forms.Basic source secrets.check for created basic source secret values":                                                {},
		"Interacting with OperatorHub.Interacting with OperatorHub filters Operators by category":                                                                   {},
		"Interacting with OperatorHub.Interacting with OperatorHub displays OperatorHub tiles filtered by \"Source\"":                                               {},
		"Interacting with OperatorHub.Interacting with OperatorHub displays OperatorHub tile view with expected available Operators":                                {},
		"Interacting with OperatorHub.Interacting with OperatorHub displays \"Clear All Filters\" link when text filter removes all Operators from display":         {},
		"Interacting with OperatorHub.Interacting with OperatorHub clears text filter when \"Clear All Filters\" link is clicked":                                   {},
		"Interacting with CatalogSource page.Interacting with CatalogSource page renders details about the redhat-operators catalog source":                         {},
		"Interacting with CatalogSource page.Interacting with CatalogSource page lists all the package manifests for redhat-operators under Operators tab":          {},
		"Interacting with CatalogSource page.Interacting with CatalogSource page allows modifying registry poll interval":                                           {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-xdenz.Installing \"Red Hat CodeReady Workspaces\" operator in test-xdenz Installs Red Hat CodeReady Workspaces operator in test-xdenz and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-xbzcg.Installing \"Red Hat CodeReady Workspaces\" operator in test-xbzcg Installs Red Hat CodeReady Workspaces operator in test-xbzcg and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-wnday.Installing \"Red Hat CodeReady Workspaces\" operator in test-wnday Installs Red Hat CodeReady Workspaces operator in test-wnday and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-ugzfo.Installing \"Red Hat CodeReady Workspaces\" operator in test-ugzfo Installs Red Hat CodeReady Workspaces operator in test-ugzfo and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-rjvdg.Installing \"Red Hat CodeReady Workspaces\" operator in test-rjvdg Installs Red Hat CodeReady Workspaces operator in test-rjvdg and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-nrdtm.Installing \"Red Hat CodeReady Workspaces\" operator in test-nrdtm Installs Red Hat CodeReady Workspaces operator in test-nrdtm and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-kvhdb.Installing \"Red Hat CodeReady Workspaces\" operator in test-kvhdb Installs Red Hat CodeReady Workspaces operator in test-kvhdb and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-jpmko.Installing \"Red Hat CodeReady Workspaces\" operator in test-jpmko Installs Red Hat CodeReady Workspaces operator in test-jpmko and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-iodab.Installing \"Red Hat CodeReady Workspaces\" operator in test-iodab Installs Red Hat CodeReady Workspaces operator in test-iodab and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-fkpev.Installing \"Red Hat CodeReady Workspaces\" operator in test-fkpev Installs Red Hat CodeReady Workspaces operator in test-fkpev and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-dydzb.Installing \"Red Hat CodeReady Workspaces\" operator in test-dydzb Installs Red Hat CodeReady Workspaces operator in test-dydzb and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-bktmu.Installing \"Red Hat CodeReady Workspaces\" operator in test-bktmu Installs Red Hat CodeReady Workspaces operator in test-bktmu and creates CodeReady Workspaces Cluster operand instance": {},
		"Installing \"Red Hat CodeReady Workspaces\" operator in test-ajmhi.Installing \"Red Hat CodeReady Workspaces\" operator in test-ajmhi Installs Red Hat CodeReady Workspaces operator in test-ajmhi and creates CodeReady Workspaces Cluster operand instance": {},
		"Ingress.Kubernetes resource CRUD operations Ingress search view displays created resource instance":                                           {},
		"Ingress.Kubernetes resource CRUD operations Ingress edits the resource instance":                                                              {},
		"Ingress.Kubernetes resource CRUD operations Ingress displays detail view for newly created resource instance":                                 {},
		"Ingress.Kubernetes resource CRUD operations Ingress displays a list view for the resource":                                                    {},
		"Ingress.Kubernetes resource CRUD operations Ingress deletes the resource instance":                                                            {},
		"Ingress.Kubernetes resource CRUD operations Ingress creates the resource instance":                                                            {},
		"ImageStream.Kubernetes resource CRUD operations ImageStream search view displays created resource instance":                                   {},
		"ImageStream.Kubernetes resource CRUD operations ImageStream edits the resource instance":                                                      {},
		"ImageStream.Kubernetes resource CRUD operations ImageStream displays detail view for newly created resource instance":                         {},
		"ImageStream.Kubernetes resource CRUD operations ImageStream displays a list view for the resource":                                            {},
		"ImageStream.Kubernetes resource CRUD operations ImageStream deletes the resource instance":                                                    {},
		"ImageStream.Kubernetes resource CRUD operations ImageStream creates the resource instance":                                                    {},
		"HorizontalPodAutoscaler.Kubernetes resource CRUD operations HorizontalPodAutoscaler search view displays created resource instance":           {},
		"HorizontalPodAutoscaler.Kubernetes resource CRUD operations HorizontalPodAutoscaler edits the resource instance":                              {},
		"HorizontalPodAutoscaler.Kubernetes resource CRUD operations HorizontalPodAutoscaler displays detail view for newly created resource instance": {},
		"HorizontalPodAutoscaler.Kubernetes resource CRUD operations HorizontalPodAutoscaler displays a list view for the resource":                    {},
		"HorizontalPodAutoscaler.Kubernetes resource CRUD operations HorizontalPodAutoscaler deletes the resource instance":                            {},
		"HorizontalPodAutoscaler.Kubernetes resource CRUD operations HorizontalPodAutoscaler creates the resource instance":                            {},
		"Helm Release.Helm Release Uninstall Helm Release through Context Menu: HR-01-TC03":                                                            {},
		"Helm Release.Helm Release Perform the helm chart upgrade for already upgraded helm chart : HR-08-TC02":                                        {},
		"Helm Release.Helm Release Perform Upgrade action on Helm Release through Context Menu: HR-01-TC04":                                            {},
		"Helm Release.Helm Release Perform Rollback action on Helm Release through Context Menu: HR-08-TC03":                                           {},
		"Helm Release.Helm Release Open the Helm tab on the navigation bar when helm charts are present: HR-05-TC05":                                   {},
		"Helm Release.Helm Release Open the Helm tab on the navigation bar when helm charts are absent: HR-05-TC01":                                    {},
		"Helm Release.Helm Release Install Helm Chart page details: HR-05-TC02":                                                                        {},
		"Helm Release.Helm Release Install Helm Chart from +Add Page using Form View: HR-06-TC04":                                                      {},
		"Helm Release.Helm Release Helm release details page: HR-05-TC13":                                                                              {},
		"Helm Release.Helm Release Filter out deployed Helm Charts: HR-05-TC06":                                                                        {},
		"Helm Release.Helm Release Create or Select the project namespace":                                                                             {},
		"Helm Release.Helm Release Context menu options of helm release: HR-01-TC01":                                                                   {},
		"Helm Release.Helm Release Actions menu on Helm page after helm chart upgrade: HR-08-TC01":                                                     {},
		"Globally installing \"Service Binding Operator\" operator in openshift-operators.Globally installing \"Service Binding Operator\" operator in openshift-operators Globally installs Service Binding Operator operator in openshift-operators and creates ServiceBinding operand": {},
		"Filtering and Searching.Filtering and Searching searches for object by kind, label, and name": {},
		"Filtering and Searching.Filtering and Searching searches for object by kind and label":        {},
		"Filtering and Searching.Filtering and Searching filters invalid Pod from object detail":       {},
		"Filtering and Searching.Filtering and Searching filters from Pods list":                       {},
		"Filtering and Searching.Filtering and Searching filters Pod from object detail":               {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Pre-provisioned Snapshot (retain policy)] snapshottable[Feature:VolumeSnapshotDataSource] volume snapshot controller  should check snapshot fields, check restore correctly works after modifying source data, check deletion":           {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Pre-provisioned Snapshot (delete policy)] snapshottable[Feature:VolumeSnapshotDataSource] volume snapshot controller  should check snapshot fields, check restore correctly works after modifying source data, check deletion":           {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Generic Ephemeral-volume (default fs) (late-binding)] ephemeral should support two pods which share the same volume":                                                                                                                     {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Generic Ephemeral-volume (default fs) (late-binding)] ephemeral should support multiple inline ephemeral volumes":                                                                                                                        {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Generic Ephemeral-volume (default fs) (late-binding)] ephemeral should create read/write inline ephemeral volume":                                                                                                                        {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Generic Ephemeral-volume (default fs) (late-binding)] ephemeral should create read-only inline ephemeral volume":                                                                                                                         {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Generic Ephemeral-volume (default fs) (immediate-binding)] ephemeral should support two pods which share the same volume":                                                                                                                {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Generic Ephemeral-volume (default fs) (immediate-binding)] ephemeral should create read/write inline ephemeral volume":                                                                                                                   {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Generic Ephemeral-volume (default fs) (immediate-binding)] ephemeral should create read-only inline ephemeral volume":                                                                                                                    {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic Snapshot (retain policy)] snapshottable[Feature:VolumeSnapshotDataSource] volume snapshot controller  should check snapshot fields, check restore correctly works after modifying source data, check deletion":                   {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic Snapshot (delete policy)] snapshottable[Feature:VolumeSnapshotDataSource] volume snapshot controller  should check snapshot fields, check restore correctly works after modifying source data, check deletion":                   {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (xfs)][Slow] volumes should store data":                                                                                                                                                                                       {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (xfs)][Slow] volumes should allow exec of files on the volume":                                                                                                                                                                {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (xfs)][Slow] multiVolume [Slow] should concurrently access the volume and restored snapshot from pods on the same node [LinuxOnly][Feature:VolumeSnapshotDataSource][Feature:VolumeSourceXFS]":                                {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (xfs)][Slow] multiVolume [Slow] should concurrently access the single volume from pods on the same node":                                                                                                                      {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (xfs)][Slow] multiVolume [Slow] should concurrently access the single read-only volume from pods on the same node":                                                                                                            {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (xfs)][Slow] multiVolume [Slow] should access to two volumes with the same volume mode and retain data across pod recreation on the same node":                                                                                {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (xfs)][Slow] multiVolume [Slow] should access to two volumes with the same volume mode and retain data across pod recreation on different node":                                                                               {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (xfs)][Slow] multiVolume [Slow] should access to two volumes with different volume mode and retain data across pod recreation on the same node":                                                                               {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (xfs)][Slow] multiVolume [Slow] should access to two volumes with different volume mode and retain data across pod recreation on different node":                                                                              {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (immediate binding)] topology should provision a volume and schedule a pod with AllowedTopologies":                                                                                                                            {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (immediate binding)] topology should fail to schedule a pod which has topologies that conflict with AllowedTopologies":                                                                                                        {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly]":                                                                                                                                  {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should fail to use a volume in a pod with mismatched mode [Slow]":                                                                                                                            {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (filesystem volmode)] multiVolume [Slow] should concurrently access the single volume from pods on the same node":                                                                                                             {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (filesystem volmode)] multiVolume [Slow] should concurrently access the single read-only volume from pods on the same node":                                                                                                   {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (filesystem volmode)] multiVolume [Slow] should access to two volumes with the same volume mode and retain data across pod recreation on the same node":                                                                       {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (filesystem volmode)] multiVolume [Slow] should access to two volumes with the same volume mode and retain data across pod recreation on different node":                                                                      {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (ext4)] volumes should store data":                                                                                                                                                                                            {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (ext4)] volumes should allow exec of files on the volume":                                                                                                                                                                     {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (ext4)] multiVolume [Slow] should concurrently access the volume and restored snapshot from pods on the same node [LinuxOnly][Feature:VolumeSnapshotDataSource][Feature:VolumeSourceXFS]":                                     {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (ext4)] multiVolume [Slow] should concurrently access the single volume from pods on the same node":                                                                                                                           {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (ext4)] multiVolume [Slow] should concurrently access the single read-only volume from pods on the same node":                                                                                                                 {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (ext4)] multiVolume [Slow] should access to two volumes with the same volume mode and retain data across pod recreation on the same node":                                                                                     {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (ext4)] multiVolume [Slow] should access to two volumes with the same volume mode and retain data across pod recreation on different node":                                                                                    {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (ext4)] multiVolume [Slow] should access to two volumes with different volume mode and retain data across pod recreation on the same node":                                                                                    {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (ext4)] multiVolume [Slow] should access to two volumes with different volume mode and retain data across pod recreation on different node":                                                                                   {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (delayed binding)] topology should provision a volume and schedule a pod with AllowedTopologies":                                                                                                                              {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (delayed binding)] topology should fail to schedule a pod which has topologies that conflict with AllowedTopologies":                                                                                                          {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] volumes should store data":                                                                                                                                                                                      {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] volumes should allow exec of files on the volume":                                                                                                                                                               {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow][LinuxOnly]":                                                                                                                  {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property":                                                                                                                         {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should verify container cannot write to subpath readonly volumes [Slow]":                                                                                                                                {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support restarting containers using file as subpath [Slow][LinuxOnly]":                                                                                                                           {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support restarting containers using directory as subpath [Slow]":                                                                                                                                 {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly]":                                                                                                                                  {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount":                                                                                                                                         {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path":                                                                                                                                                                       {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath [LinuxOnly]":                                                                                                                                                             {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file [LinuxOnly]":                                                                                                                                                        {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory":                                                                                                                                                                      {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource":                                                                                                                        {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should support creating multiple subpath from same volumes [Slow]":                                                                                                                                      {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow][LinuxOnly]":                                                                                                                       {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath file is outside the volume [Slow][LinuxOnly]":                                                                                                                                    {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath directory is outside the volume [Slow][LinuxOnly]":                                                                                                                               {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow][LinuxOnly]":                                                                                                                            {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly]":                                                                                                                           {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with snapshot data source [Feature:VolumeSnapshotDataSource]":                                                                                                             {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with mount options":                                                                                                                                                       {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup skips ownership changes to the volume contents": {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents":            {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents":                                                                               {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup applied to the volume contents":                         {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents":                    {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents":                                                                                       {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it":                                                                                                                    {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand Verify if offline PVC expansion works":                                                                                                                                            {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] volumes should store data":                                                                                                                                                                                   {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly]":                                                                                                                                       {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] volumeMode should fail to use a volume in a pod with mismatched mode [Slow]":                                                                                                                                 {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property":                                                                                                                      {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] provisioning should provision storage with snapshot data source [Feature:VolumeSnapshotDataSource]":                                                                                                          {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] multiVolume [Slow] should concurrently access the single volume from pods on the same node":                                                                                                                  {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] multiVolume [Slow] should concurrently access the single read-only volume from pods on the same node":                                                                                                        {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] multiVolume [Slow] should access to two volumes with the same volume mode and retain data across pod recreation on the same node":                                                                            {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] multiVolume [Slow] should access to two volumes with the same volume mode and retain data across pod recreation on different node":                                                                           {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] multiVolume [Slow] should access to two volumes with different volume mode and retain data across pod recreation on the same node":                                                                           {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)] multiVolume [Slow] should access to two volumes with different volume mode and retain data across pod recreation on different node":                                                                          {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it":                                                                                                                 {},
		"External Storage [Driver: ebs.csi.aws.com] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand Verify if offline PVC expansion works":                                                                                                                                         {},
		"Events.Events.event view displays created pod": {},
		"Editing labels.Editing labels Adds a resource instance label, updates the resource instance label, and makes sure the link works":                                                                             {},
		"Dynamic provision via storage class with options.Dynamic provision using storage class with option volumeBindingMode set to WaitForFirstConsumer":                                                             {},
		"Dynamic provision via storage class with options.Dynamic provision using storage class with option volumeBindingMode set to Immediate":                                                                        {},
		"Deployments.Visiting Overview page Deployments shows deployment details sidebar when item is clicked":                                                                                                         {},
		"Deployments.Visiting Overview page Deployments displays a deployment in the overview list page":                                                                                                               {},
		"DeploymentConfigs.Visiting Overview page DeploymentConfigs shows deploymentconfig details sidebar when item is clicked":                                                                                       {},
		"DeploymentConfigs.Visiting Overview page DeploymentConfigs displays a deploymentconfig in the overview list page":                                                                                             {},
		"DeploymentConfig.Kubernetes resource CRUD operations DeploymentConfig search view displays created resource instance":                                                                                         {},
		"DeploymentConfig.Kubernetes resource CRUD operations DeploymentConfig edits the resource instance":                                                                                                            {},
		"DeploymentConfig.Kubernetes resource CRUD operations DeploymentConfig displays detail view for newly created resource instance":                                                                               {},
		"DeploymentConfig.Kubernetes resource CRUD operations DeploymentConfig displays a list view for the resource":                                                                                                  {},
		"DeploymentConfig.Kubernetes resource CRUD operations DeploymentConfig deletes the resource instance":                                                                                                          {},
		"DeploymentConfig.Kubernetes resource CRUD operations DeploymentConfig creates the resource instance":                                                                                                          {},
		"Deployment.Kubernetes resource CRUD operations Deployment search view displays created resource instance":                                                                                                     {},
		"Deployment.Kubernetes resource CRUD operations Deployment edits the resource instance":                                                                                                                        {},
		"Deployment.Kubernetes resource CRUD operations Deployment displays detail view for newly created resource instance":                                                                                           {},
		"Deployment.Kubernetes resource CRUD operations Deployment displays a list view for the resource":                                                                                                              {},
		"Deployment.Kubernetes resource CRUD operations Deployment deletes the resource instance":                                                                                                                      {},
		"Deployment.Kubernetes resource CRUD operations Deployment creates the resource instance":                                                                                                                      {},
		"Deploy Image.Deploy Image page.should render project/namespace dropdown disabled when in a project context":                                                                                                   {},
		"Deploy Image.Deploy Image page.should render applications dropdown disabled":                                                                                                                                  {},
		"Deploy Image.Deploy Image page.should auto fill in the application":                                                                                                                                           {},
		"Deploy Image.Deploy Image page.can be used to search for an image":                                                                                                                                            {},
		"DaemonSets.Visiting Overview page DaemonSets shows daemonset details sidebar when item is clicked":                                                                                                            {},
		"DaemonSets.Visiting Overview page DaemonSets displays a daemonset in the overview list page":                                                                                                                  {},
		"DaemonSet.Kubernetes resource CRUD operations DaemonSet search view displays created resource instance":                                                                                                       {},
		"DaemonSet.Kubernetes resource CRUD operations DaemonSet edits the resource instance":                                                                                                                          {},
		"DaemonSet.Kubernetes resource CRUD operations DaemonSet displays detail view for newly created resource instance":                                                                                             {},
		"DaemonSet.Kubernetes resource CRUD operations DaemonSet displays a list view for the resource":                                                                                                                {},
		"DaemonSet.Kubernetes resource CRUD operations DaemonSet deletes the resource instance":                                                                                                                        {},
		"DaemonSet.Kubernetes resource CRUD operations DaemonSet creates the resource instance":                                                                                                                        {},
		"CustomResourceDefinitions.CustomResourceDefinitions creates, displays, and deletes `CustomResourceDefinitions` and creates a new custom resource instance":                                                    {},
		"CronJob.Kubernetes resource CRUD operations CronJob search view displays created resource instance":                                                                                                           {},
		"CronJob.Kubernetes resource CRUD operations CronJob edits the resource instance":                                                                                                                              {},
		"CronJob.Kubernetes resource CRUD operations CronJob displays detail view for newly created resource instance":                                                                                                 {},
		"CronJob.Kubernetes resource CRUD operations CronJob displays a list view for the resource":                                                                                                                    {},
		"CronJob.Kubernetes resource CRUD operations CronJob deletes the resource instance":                                                                                                                            {},
		"CronJob.Kubernetes resource CRUD operations CronJob creates the resource instance":                                                                                                                            {},
		"Create the different workloads from Add page.Create the different workloads from Add page Upload Jar file page details: A-10-TC01":                                                                            {},
		"Create the different workloads from Add page.Create the different workloads from Add page Getting started resources on Developer perspective":                                                                 {},
		"Create the different workloads from Add page.Create the different workloads from Add page Deploy secure image with Runtime icon from external registry: A-02-TC02 (example #1)":                               {},
		"Create the different workloads from Add page.Create the different workloads from Add page Deploy image with Runtime icon from internal registry: A-02-TC03 (example #1)":                                      {},
		"Create the different workloads from Add page.Create the different workloads from Add page Deploy git workload with devfile from topology page: A-04-TC01":                                                     {},
		"Create the different workloads from Add page.Create the different workloads from Add page Deploy Application using Catalog Template \"Other\": A-01-TC02 (example #5)":                                        {},
		"Create the different workloads from Add page.Create the different workloads from Add page Deploy Application using Catalog Template \"Middleware\": A-01-TC02 (example #4)":                                   {},
		"Create the different workloads from Add page.Create the different workloads from Add page Deploy Application using Catalog Template \"Languages\": A-01-TC02 (example #3)":                                    {},
		"Create the different workloads from Add page.Create the different workloads from Add page Deploy Application using Catalog Template \"Databases\": A-01-TC02 (example #2)":                                    {},
		"Create the different workloads from Add page.Create the different workloads from Add page Deploy Application using Catalog Template \"CI/CD\": A-01-TC02 (example #1)":                                        {},
		"Create the different workloads from Add page.Create the different workloads from Add page Create the Database from Add page: A-03-TC01":                                                                       {},
		"Create the different workloads from Add page.Create the different workloads from Add page Create a workload from YAML file: A-07-TC01":                                                                        {},
		"Create the different workloads from Add page.Create the different workloads from Add page Create a workload from Docker file with \"Deployment\" as resource type: A-05-TC02 (example #1)":                    {},
		"Create namespace from install operators.Create namespace from install operators disables default catalog sources from operatorHub details page":                                                               {},
		"Create key/value secrets.Create key/value secrets Validate a key/value secret whose value is an ascii file ":                                                                                                  {},
		"Create key/value secrets.Create key/value secrets Validate a key/value secret whose value is a unicode file ":                                                                                                 {},
		"Create key/value secrets.Create key/value secrets Validate a key/value secret whose value is a binary file ":                                                                                                  {},
		"Create a test namespace.creates test namespace if necessary":                                                                                                                                                  {},
		"ConfigMap.Kubernetes resource CRUD operations ConfigMap search view displays created resource instance":                                                                                                       {},
		"ConfigMap.Kubernetes resource CRUD operations ConfigMap edits the resource instance":                                                                                                                          {},
		"ConfigMap.Kubernetes resource CRUD operations ConfigMap displays detail view for newly created resource instance":                                                                                             {},
		"ConfigMap.Kubernetes resource CRUD operations ConfigMap displays a list view for the resource":                                                                                                                {},
		"ConfigMap.Kubernetes resource CRUD operations ConfigMap deletes the resource instance":                                                                                                                        {},
		"ConfigMap.Kubernetes resource CRUD operations ConfigMap creates the resource instance":                                                                                                                        {},
		"Cluster Dashboard.Utilization Card.has duration dropdown":                                                                                                                                                     {},
		"Cluster Dashboard.Utilization Card.has all items":                                                                                                                                                             {},
		"Cluster Dashboard.Status Card.has health indicators":                                                                                                                                                          {},
		"Cluster Dashboard.Status Card.has View alerts link":                                                                                                                                                           {},
		"Cluster Dashboard.Inventory Card.has all items":                                                                                                                                                               {},
		"Cluster Dashboard.Details Card.has all fields populated":                                                                                                                                                      {},
		"Cluster Dashboard.Details Card.has View settings link":                                                                                                                                                        {},
		"Cluster Dashboard.Activity Card.has View events link":                                                                                                                                                         {},
		"Cluster Dashboard.Activity Card.has Pause events button":                                                                                                                                                      {},
		"CSI testing related feature.Configure 'Retain' reclaim policy (outline example : | gp2-csi |)":                                                                                                                {},
		"CSI testing related feature.Check CSI Driver Operator installation (outline example : | ebs.csi.aws.com | gp2-csi | aws-ebs-csi-driver-operator | aws-ebs-csi-driver-controller | aws-ebs-csi-driver-node |)": {},
		"CSI testing related feature.CSI dynamic provisioning with different type (outline example : | gp2-csi | st1 | 125Gi |)":                                                                                       {},
		"CSI testing related feature.CSI dynamic provisioning with different type (outline example : | gp2-csi | sc1 | 125Gi |)":                                                                                       {},
		"CRD extensions.ConsoleNotification CRD.displays the ConsoleNotification instance in its new location":                                                                                                         {},
		"CRD extensions.ConsoleNotification CRD.displays the ConsoleNotification instance":                                                                                                                             {},
		"CRD extensions.ConsoleNotification CRD.displays detail view for ConsoleNotification instance":                                                                                                                 {},
		"CRD extensions.ConsoleNotification CRD.displays YAML editor for modifying the location of ConsoleNotification instance":                                                                                       {},
		"CRD extensions.ConsoleNotification CRD.displays YAML editor for creating a new ConsoleNotification instance":                                                                                                  {},
		"CRD extensions.ConsoleNotification CRD.deletes the ConsoleNotification instance":                                                                                                                              {},
		"CRD extensions.ConsoleNotification CRD.creates a new ConsoleNotification instance":                                                                                                                            {},
		"CRD extensions.ConsoleLink CRD.displays the ConsoleLink instance in the user menu":                                                                                                                            {},
		"CRD extensions.ConsoleLink CRD.displays the ConsoleLink instance in the help menu":                                                                                                                            {},
		"CRD extensions.ConsoleLink CRD.displays detail view for ConsoleLink user menu instance":                                                                                                                       {},
		"CRD extensions.ConsoleLink CRD.displays detail view for ConsoleLink help menu instance":                                                                                                                       {},
		"CRD extensions.ConsoleLink CRD.displays YAML editor for creating a new ConsoleLink user menu instance":                                                                                                        {},
		"CRD extensions.ConsoleLink CRD.displays YAML editor for creating a new ConsoleLink help menu instance":                                                                                                        {},
		"CRD extensions.ConsoleLink CRD.deletes the ConsoleLink user menu instance":                                                                                                                                    {},
		"CRD extensions.ConsoleLink CRD.deletes the ConsoleLink help menu instance":                                                                                                                                    {},
		"CRD extensions.ConsoleLink CRD.creates a new ConsoleLink user menu instance":                                                                                                                                  {},
		"CRD extensions.ConsoleLink CRD.creates a new ConsoleLink help menu instance":                                                                                                                                  {},
		"CRD extensions.ConsoleExternalLogLink CRD.does not display the ConsoleExternalLogLink instance on the test pod":                                                                                               {},
		"CRD extensions.ConsoleExternalLogLink CRD.displays the ConsoleExternalLogLink instance on the test pod":                                                                                                       {},
		"CRD extensions.ConsoleExternalLogLink CRD.displays detail view for ConsoleExternalLogLink instance":                                                                                                           {},
		"CRD extensions.ConsoleExternalLogLink CRD.displays YAML editor for creating a new ConsoleExternalLogLink instance":                                                                                            {},
		"CRD extensions.ConsoleExternalLogLink CRD.displays YAML editor for adding namespaceFilter to the ConsoleExternalLogLink instance":                                                                             {},
		"CRD extensions.ConsoleExternalLogLink CRD.deletes the test pod":                                                                                                                                               {},
		"CRD extensions.ConsoleExternalLogLink CRD.deletes the ConsoleExternalLogLink instance":                                                                                                                        {},
		"CRD extensions.ConsoleExternalLogLink CRD.creates a new test pod to display the ConsoleExternalLogLink instance":                                                                                              {},
		"CRD extensions.ConsoleExternalLogLink CRD.creates a new ConsoleExternalLogLink instance":                                                                                                                      {},
		"CRD extensions.ConsoleClIDownload CRD.displays the ConsoleCLIDownload instance on the Command Line Tools page":                                                                                                {},
		"CRD extensions.ConsoleClIDownload CRD.displays detail view for ConsoleCLIDownload instance":                                                                                                                   {},
		"CRD extensions.ConsoleClIDownload CRD.displays YAML editor for creating a new ConsoleCLIDownload instance":                                                                                                    {},
		"CRD extensions.ConsoleClIDownload CRD.deletes the ConsoleCLIDownload instance":                                                                                                                                {},
		"CRD extensions.ConsoleClIDownload CRD.creates a new ConsoleCLIDownload instance":                                                                                                                              {},
		"Bulk import operation.Bulk import operation successfully import three yaml secret definitions":                                                                                                                {},
		"Bulk import operation.Bulk import operation fail to import missing namespaced resources (server validation)":                                                                                                  {},
		"BuildConfig.Kubernetes resource CRUD operations BuildConfig search view displays created resource instance":                                                                                                   {},
		"BuildConfig.Kubernetes resource CRUD operations BuildConfig edits the resource instance":                                                                                                                      {},
		"BuildConfig.Kubernetes resource CRUD operations BuildConfig displays detail view for newly created resource instance":                                                                                         {},
		"BuildConfig.Kubernetes resource CRUD operations BuildConfig displays a list view for the resource":                                                                                                            {},
		"BuildConfig.Kubernetes resource CRUD operations BuildConfig deletes the resource instance":                                                                                                                    {},
		"BuildConfig.Kubernetes resource CRUD operations BuildConfig creates the resource instance":                                                                                                                    {},
		"Backup from one node and recover on another.service-upgrade":                                                                                                                                                  {},
		"Backup from one node and recover on another.restore_different_node":                                                                                                                                           {},
		"Backup from one node and recover on another.[sig-storage] [sig-api-machinery] secret-upgrade":                                                                                                                 {},
		"Backup from one node and recover on another.[sig-apps] statefulset-upgrade":                                                                                                                                   {},
		"Backup from one node and recover on another.[sig-apps] replicaset-upgrade":                                                                                                                                    {},
		"Backup from one node and recover on another.[sig-apps] deployment-upgrade":                                                                                                                                    {},
		"Backup from one node and recover on another.[sig-apps] daemonset-upgrade":                                                                                                                                     {},
		"Auth test.Login test.logs in as kubeadmin user":                                                                                                                                                               {},
		"Auth test.Auth test logs in as 'test' user via htpasswd identity provider":                                                                                                                                    {},
		"Auth test.Auth test log in as 'kubeadmin' user":                                                                                                                                                               {},
		"Annotations.Annotations Creates, Edits, Updates, and Deletes Annotations":                                                                                                                                     {},
		"All in one volume.Project secrets, configmap not explicitly defining keys for pathing within a volume":                                                                                                        {},
		"All in one volume.Project secrets, configmap and downward API into the same volume with normal keys and path":                                                                                                 {},
		"Alertmanager: YAML.saves Alertmanager YAML":                                                                                                                                                                   {},
		"Alertmanager: YAML.displays the Alertmanager YAML page":                                                                                                                                                       {},
		"Alertmanager: Configuration.prevents deletion of default receiver":                                                                                                                                            {},
		"Alertmanager: Configuration.prevents deletion and form edit of a receiver with sub-route":                                                                                                                     {},
		"Alertmanager: Configuration.launches Alert Routing modal, edits and saves correctly":                                                                                                                          {},
		"Alertmanager: Configuration.edits a receiver correctly":                                                                                                                                                       {},
		"Alertmanager: Configuration.displays the Alertmanager Configuration Details page":                                                                                                                             {},
		"Alertmanager: Configuration.deletes a receiver correctly":                                                                                                                                                     {},
		"Alertmanager: Configuration.creates a receiver correctly":                                                                                                                                                     {},
		"Add Secret to Workloads.Add Secret to Workloads as Volume.Add Secret to Deployment as Vol":                                                                                                                    {},
		"Add Secret to Workloads.Add Secret to Workloads as Enviroment Variables.Add Secret to Deployment as Env":                                                                                                      {},
		"operator install cloud-credential":            {},
		"operator install cloud-controller-manager":    {},
		"operator conditions cloud-credential":         {},
		"operator conditions cloud-controller-manager": {},
		"[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                            {},
		"[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                  {},
		"[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                 {},
		"[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                           {},
		"[sig-network] Services should serve a basic endpoint from pods  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                        {},
		"[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                 {},
		"[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                     {},
		"[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                               {},
		"[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                          {},
		"[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                {},
		"[sig-node] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                          {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                           {},
		"[sig-apps] ReplicationController should adopt matching pods on creation [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                {},
		"[sig-apps] Deployment deployment should support proportional scaling [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                   {},
		"[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir] One pod requesting one prebound PVC should be able to mount volume and read from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                              {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] One pod requesting one prebound PVC should be able to mount volume and write from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                            {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                 {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] One pod requesting one prebound PVC should be able to mount volume and write from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                 {},
		"[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                         {},
		"[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] One pod requesting one prebound PVC should be able to mount volume and write from pod1 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                            {},
		"[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                            {},
		"[sig-storage] PersistentVolumes-local  [Volume type: block] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                           {},
		"[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PVC and a pre-bound PV: test write access [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                            {},
		"[sig-storage] PersistentVolumes NFS when invoking the Recycle reclaim policy should test that a PV becomes Available and is clean after the PVC is deleted. [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                  {},
		"[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : projected [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                {},
		"[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] new files should be created with FSGroup ownership when container is non-root [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                     {},
		"[sig-storage] Downward API volume should provide podname as non-root with fsgroup [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-storage] CSI mock volume CSIStorageCapacity CSIStorageCapacity used, insufficient capacity [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                              {},
		"[sig-storage] CSI mock volume CSIStorageCapacity CSIStorageCapacity unused [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                   {},
		"[sig-storage] CSI mock volume CSI workload information using mock driver should not be passed when podInfoOnMount=nil [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                        {},
		"[sig-storage] CSI mock volume CSI workload information using mock driver should not be passed when CSIDriver does not exist [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                  {},
		"[sig-storage] CSI mock volume CSI workload information using mock driver contain ephemeral=true when using inline volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                     {},
		"[sig-storage] CSI mock volume CSI online volume expansion should expand volume without restarting pod if attach=on, nodeExpansion=on [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                         {},
		"[sig-storage] CSI mock volume CSI Volume expansion should not expand volume if resizingOnDriver=off, resizingOnSC=on [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-storage] CSI mock volume CSI Volume expansion should expand volume without restarting pod if nodeExpansion=off [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-storage] CSI mock volume CSI Volume expansion should expand volume by restarting pod if attach=on, nodeExpansion=on [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                     {},
		"[sig-storage] CSI mock volume CSI Volume expansion should expand volume by restarting pod if attach=off, nodeExpansion=on [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                    {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Pre-provisioned Snapshot (retain policy)] snapshottable[Feature:VolumeSnapshotDataSource] volume snapshot controller  should check snapshot fields, check restore correctly works after modifying source data, check deletion [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                             {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                              {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                          {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                       {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: CSI Ephemeral-volume (default fs)] ephemeral should support two pods which share the same volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-node] [Feature:Example] Secret should create a pod that reads a secret [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                  {},
		"[sig-node] [Feature:Example] Liveness liveness pods should be automatically restarted [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                        {},
		"[sig-node] Security Context should support seccomp unconfined on the pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                         {},
		"[sig-node] Probing container should override timeoutGracePeriodSeconds when StartupProbe field is set [Feature:ProbeTerminationGracePeriod] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                  {},
		"[sig-node] Probing container should override timeoutGracePeriodSeconds when LivenessProbe field is set [Feature:ProbeTerminationGracePeriod] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                 {},
		"[sig-node] Probing container should be ready immediately after startupProbe succeeds [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                         {},
		"[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for cronjob [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                           {},
		"[sig-cli] Kubectl Port forwarding With a server listening on localhost that expects a client request should support a client that connects, sends NO DATA, and disconnects [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                   {},
		"[sig-auth] ServiceAccounts should set ownership and permission when RunAsUser or FsGroup is present [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                        {},
		"[sig-apps] [Feature:TTLAfterFinished] job should be deleted once it finishes after TTL seconds [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                               {},
		"[sig-apps] DisruptionController evictions: enough pods, replicaSet, percentage => should allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                     {},
		"[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Inline-volume (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: tmpfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                  {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-bindmounted] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: blockfs] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                 {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                         {},
		"[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                  {},
		"[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance] [Serial:Self] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                 {},
		"[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                               {},
		"[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                          {},
		"[sig-apps] DisruptionController should observe that the PodDisruptionBudget status is not updated for unmanaged pods [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should support a 'default-deny-ingress' policy [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                      {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce policy to allow traffic from pods within server namespace based on PodSelector [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                       {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce policy based on Ports [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce policy based on PodSelector or NamespaceSelector [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                     {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce policy based on NamespaceSelector with MatchExpressions[Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                               {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should not allow access by TCP when a policy specifies only SCTP [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                    {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should deny ingress access to updated pod [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                           {},
		"[sig-storage] PersistentVolumes-local  Pod with node different from PV's NodeAffinity should fail scheduling due to different NodeSelector [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                   {},
		"[sig-network] Networking Granular Checks: Services should support basic nodePort: udp functionality [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                          {},
		"[sig-network] Networking Granular Checks: Services should function for node-Service: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                    {},
		"[sig-network] Networking Granular Checks: Services should function for multiple endpoint-Services with same selector [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                         {},
		"[sig-network] Networking Granular Checks: Services should function for endpoint-Service: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                 {},
		"[sig-network] Networking Granular Checks: Services should be able to handle large requests: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-network] pods should successfully create sandboxes by getting pod": {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should adopt matching orphans and release non-matching pods [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-apps] Deployment should not disrupt a cloud load-balancer's connectivity during rollout [Suite:openshift/conformance/parallel] [Suite:k8s]":                                          {},
		"Operator upgrade kube-controller-manager":           {},
		"Operator upgrade ingress":                           {},
		"Operator upgrade etcd":                              {},
		"operator conditions  kube-storage-version-migrator": {},
		"operator conditions  kube-controller-manager":       {},
		"operator conditions  ingress":                       {},
		"[sig-storage] [sig-api-machinery] secret-upgrade":   {},
		"[sig-apps] replicaset-upgrade":                      {},
		"[sig-apps] deployment-upgrade":                      {},
		"[sig-apps] daemonset-upgrade":                       {},
		"[sig-cluster-lifecycle] ClusterOperators are available and not degraded after upgrade":                                                                                                                                                                                                                                                                        {},
		"[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                     {},
		"[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                            {},
		"[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                         {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                   {},
		"[sig-apps] ReplicaSet Replace and Patch tests [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                                                                                                                                       {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                       {},
		"[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                     {},
		"[sig-storage] CSI mock volume CSI Volume Snapshots [Feature:VolumeSnapshotDataSource] volumesnapshotcontent and pvc in Bound state with deletion timestamp set should not get deleted while snapshot finalizer exists [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                     {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Pre-provisioned Snapshot (delete policy)] snapshottable[Feature:VolumeSnapshotDataSource] volume snapshot controller  should check snapshot fields, check restore correctly works after modifying source data, check deletion [Suite:openshift/conformance/parallel] [Suite:k8s]":              {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-node] Security Context should support seccomp runtime/default [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: dir-link] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                          {},
		"[sig-cli] Kubectl client Simple pod should return command exit codes running a failing command [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                            {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce updated policy [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce policy to allow traffic only from a pod in a different namespace based on PodSelector and NamespaceSelector [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                       {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce multiple ingress policies with ingress allow-all policy taking precedence [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                         {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should allow ingress access from updated pod [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                     {},
		"[sig-network] Networking Granular Checks: Services should function for endpoint-Service: http [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                             {},
		"[sig-network] Networking Granular Checks: Services should be able to handle large requests: udp [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                                           {},
		"[sig-storage] PVC Protection Verify that scheduling of a pod that uses PVC that is being deleted fails and the pod becomes Unschedulable [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                  {},
		"[sig-network] Conntrack should be able to preserve UDP traffic when server pod cycles for a ClusterIP service [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Pre-provisioned PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Inline-volume (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                           {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should work with Ingress,Egress specified together [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should support a 'default-deny-all' policy [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                        {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should stop enforcing policies after they are deleted [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                             {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce policies to check ingress and egress policies can be controlled independently based on PodSelector [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce multiple egress policies with egress allow-all policy taking precedence [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]":                            {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should ensure an IP overlapping both IPBlock.CIDR and IPBlock.Except is allowed [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                   {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should allow egress access to server in CIDR block [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                {},
		"Operator upgrade network":                        {},
		"Operator upgrade machine-api":                    {},
		"operator conditions  network":                    {},
		"[sig-apps] job-upgrade":                          {},
		"[sig-mco] Machine config pools complete upgrade": {},
		"[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                        {},
		"[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                     {},
		"[sig-network] Services should be able to update service type to NodePort listening on same port number but different protocols [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                {},
		"[sig-storage] In-tree Volumes [Driver: local][LocalVolumeType: block] [Testpattern: Pre-provisioned PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-node] Mount propagation should propagate mounts within defined scopes [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] PVC Protection Verify that PVC in active use by a pod is not removed immediately [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                {},
		"[sig-storage] PVC Protection Verify \"immediate\" deletion of a PVC that is not in active use by a pod [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                        {},
		"operator conditions  machine-api": {},
		"[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                     {},
		"[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                                                                                                         {},
		"[sig-operator] OLM should be installed with operatorgroups at version v1 [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                     {},
		"[sig-imageregistry][Feature:ImageTriggers] Image change build triggers TestMultipleImageChangeBuildTriggers [Suite:openshift/conformance/parallel]":                                                                                                                                                                  {},
		"[sig-cluster-lifecycle][Feature:Machines] Managed cluster should have machine resources [Suite:openshift/conformance/parallel]":                                                                                                                                                                                      {},
		"[sig-arch] Managed cluster should ensure control plane operators do not make themselves unevictable [Suite:openshift/conformance/parallel]":                                                                                                                                                                          {},
		"[sig-network] Networking IPerf2 [Feature:Networking-Performance] should run iperf2 [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                               {},
		"[sig-node] Pods Extended Pod Container lifecycle should not create extra sandbox if all containers are done [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                      {},
		"[sig-storage] PersistentVolumes GCEPD should test that deleting the Namespace of a PVC and Pod causes the successful detach of Persistent Disk [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                   {},
		"[sig-storage] PersistentVolumes GCEPD should test that deleting a PVC before the pod does not cause pod deletion to fail on PD detach [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Pre-provisioned PV (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Pre-provisioned PV (ext3)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Pre-provisioned PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Inline-volume (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                         {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce except clause while egress access to server in CIDR block [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Pre-provisioned PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                             {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                          {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                                       {},
		"[sig-operator] OLM should be installed with subscriptions at version v1alpha1 [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                {},
		"[sig-operator] OLM should be installed with installplans at version v1alpha1 [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                 {},
		"[sig-arch] Managed cluster should set requests but not limits [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                                {},
		"[sig-arch] Managed cluster should ensure control plane pods do not run in best-effort QoS [Suite:openshift/conformance/parallel]":                                                                                                                                                                                    {},
		"[sig-arch] ClusterOperators should define at least one related object that is not a namespace [Suite:openshift/conformance/parallel]":                                                                                                                                                                                {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for security.openshift.io/v1, Resource=rangeallocations [Suite:openshift/conformance/parallel]":                                                                                                                                           {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for image.openshift.io/v1, Resource=images [Suite:openshift/conformance/parallel]":                                                                                                                                                        {},
		"Operator upgrade monitoring":                                                 {},
		"Operator upgrade image-registry":                                             {},
		"operator conditions  monitoring":                                             {},
		"operator conditions  image-registry":                                         {},
		"operator conditions  etcd":                                                   {},
		"[bz-Cluster Version Operator] Verify object deletions after upgrade success": {},
		"[sig-arch] Only known images used by tests":                                  {},
		"[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]": {},
		"[sig-operator] OLM should be installed with clusterserviceversions at version v1alpha1 [Suite:openshift/conformance/parallel]":                                                                                    {},
		"[sig-operator] OLM should be installed with catalogsources at version v1alpha1 [Suite:openshift/conformance/parallel]":                                                                                            {},
		"[sig-operator] OLM should Implement packages API server and list packagemanifest info with namespace not NULL [Suite:openshift/conformance/parallel]":                                                             {},
		"[sig-devex][Feature:Templates] templateinstance object kinds test should create and delete objects from varying API groups [Suite:openshift/conformance/parallel]":                                                {},
		"[sig-coreos] [Conformance] CoreOS bootimages TestBootimagesPresent [Suite:openshift/conformance/parallel/minimal]":                                                                                                {},
		"[sig-auth][Feature:RoleBindingRestrictions] RoleBindingRestrictions should be functional  Create a rolebinding when there are no restrictions should succeed [Suite:openshift/conformance/parallel]":              {},
		"[sig-auth][Feature:OpenShiftAuthorization] RBAC proxy for openshift authz  RunLegacyClusterRoleEndpoint should succeed [Suite:openshift/conformance/parallel]":                                                    {},
		"[sig-arch] ClusterOperators should define at least one namespace in their lists of related objects [Suite:openshift/conformance/parallel]":                                                                        {},
		"[sig-apps][Feature:OpenShiftControllerManager] TestDeploymentConfigDefaults [Suite:openshift/conformance/parallel]":                                                                                               {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for template.openshift.io/v1, Resource=brokertemplateinstances [Suite:openshift/conformance/parallel]":                                 {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for oauth.openshift.io/v1, Resource=oauthclients [Suite:openshift/conformance/parallel]":                                               {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for apps.openshift.io/v1, Resource=deploymentconfigs [Suite:openshift/conformance/parallel]":                                           {},
		"[sig-api-machinery][Feature:ResourceQuota] Object count should properly count the number of imagestreams resources [Suite:openshift/conformance/parallel]":                                                        {},
		"[sig-arch] Managed cluster should only include cluster daemonsets that have maxUnavailable update of 10 or 33 percent [Suite:openshift/conformance/parallel]":                                                     {},
		"[sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]":                                       {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should not deadlock when a pod's predecessor fails [Suite:openshift/conformance/parallel] [Suite:k8s]":                                  {},
		"[sig-imageregistry] Image registry remain available":                                                                                                                                                                                     {},
		"[sig-storage] Managed cluster should have no crashlooping recycler pods over four minutes [Suite:openshift/conformance/parallel]":                                                                                                        {},
		"[sig-operator] an end user can use OLM Report Upgradeable in OLM ClusterOperators status [Suite:openshift/conformance/parallel]":                                                                                                         {},
		"[sig-operator] OLM should be installed with packagemanifests at version v1 [Suite:openshift/conformance/parallel]":                                                                                                                       {},
		"[sig-node] should override timeoutGracePeriodSeconds when annotation is set [Suite:openshift/conformance/parallel]":                                                                                                                      {},
		"[sig-imageregistry][Feature:ImageLookup] Image policy should perform lookup when the object has the resolve-names annotation [Suite:openshift/conformance/parallel]":                                                                     {},
		"[sig-devex][Feature:OpenShiftControllerManager] TestDockercfgTokenDeletedController [Suite:openshift/conformance/parallel]":                                                                                                              {},
		"[sig-cli] oc explain should contain spec+status for builtinTypes [Suite:openshift/conformance/parallel]":                                                                                                                                 {},
		"[sig-cli] oc adm images [Suite:openshift/conformance/parallel]":                                                                                                                                                                          {},
		"[sig-auth][Feature:RoleBindingRestrictions] RoleBindingRestrictions should be functional  Create a rolebinding when subject is permitted by RBR should succeed [Suite:openshift/conformance/parallel]":                                   {},
		"[sig-auth][Feature:OpenShiftAuthorization] self-SAR compatibility  TestBootstrapPolicySelfSubjectAccessReviews should succeed [Suite:openshift/conformance/parallel]":                                                                    {},
		"[sig-auth][Feature:OpenShiftAuthorization] scopes TestScopedImpersonation should succeed [Suite:openshift/conformance/parallel]":                                                                                                         {},
		"[sig-auth][Feature:OAuthServer] [Headers] expected headers returned from the token request URL [Suite:openshift/conformance/parallel]":                                                                                                   {},
		"[sig-auth][Feature:OAuthServer] [Headers] expected headers returned from the root URL [Suite:openshift/conformance/parallel]":                                                                                                            {},
		"[sig-arch] Managed cluster should have operators on the cluster version [Suite:openshift/conformance/parallel]":                                                                                                                          {},
		"[sig-arch] Managed cluster should ensure platform components have system-* priority class associated [Suite:openshift/conformance/parallel]":                                                                                             {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs keep the deployer pod invariant valid should deal with cancellation of running deployment [Suite:openshift/conformance/parallel]":                                                 {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for user.openshift.io/v1, Resource=groups [Suite:openshift/conformance/parallel]":                                                                             {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for image.openshift.io/v1, Resource=imagestreams [Suite:openshift/conformance/parallel]":                                                                      {},
		"[sig-api-machinery][Feature:APIServer] authenticated browser should get a 200 from / [Suite:openshift/conformance/parallel]":                                                                                                             {},
		"[sig-api-machinery] APIServer CR fields validation additionalCORSAllowedOrigins [Suite:openshift/conformance/parallel]":                                                                                                                  {},
		"[sig-auth][Feature:OAuthServer] OAuth server should use http1.1 only to prevent http2 connection reuse [Suite:openshift/conformance/parallel]":                                                                                           {},
		"[sig-network][endpoints] admission blocks manual creation of Endpoints pointing to the cluster or service network [Suite:openshift/conformance/parallel]":                                                                                {},
		"[sig-cli] oc secret creates and retrieves expected [Suite:openshift/conformance/parallel]":                                                                                                                                               {},
		"[sig-cli] oc can get list of nodes [Suite:openshift/conformance/parallel]":                                                                                                                                                               {},
		"[sig-cli] oc annotate pod [Suite:openshift/conformance/parallel]":                                                                                                                                                                        {},
		"[sig-network] network isolation when using OpenshiftSDN in a mode that does not isolate namespaces by default should allow communication between pods in different namespaces on different nodes [Suite:openshift/conformance/parallel]": {},
		"[sig-instrumentation] Prometheus when installed on the cluster should have non-Pod host cAdvisor metrics [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                  {},
		"[sig-imageregistry][Feature:Image] oc tag should work when only imagestreams api is available [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                             {},
		"[sig-cli] oc builds patch buildconfig [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                     {},
		"[sig-cli] oc builds get buildconfig [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                       {},
		"[sig-network] Services should respect internalTrafficPolicy=Local Pod to Pod [Feature:ServiceInternalTrafficPolicy] [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                  {},
		"[sig-sippy] install should not timeout": {},
		"[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]":                                                                                 {},
		"[sig-operator] OLM should have imagePullPolicy:IfNotPresent on thier deployments [Suite:openshift/conformance/parallel]":                                                                                                                                         {},
		"[sig-imageregistry][Feature:Image] signature TestImageAddSignature [Suite:openshift/conformance/parallel]":                                                                                                                                                       {},
		"[sig-imageregistry][Feature:ImageTriggers] Image change build triggers TestSimpleImageChangeBuildTriggerFromImageStreamTagSTI [Suite:openshift/conformance/parallel]":                                                                                            {},
		"[sig-imageregistry][Feature:ImageTriggers] Image change build triggers TestSimpleImageChangeBuildTriggerFromImageStreamTagDockerWithConfigChange [Suite:openshift/conformance/parallel]":                                                                         {},
		"[sig-imageregistry][Feature:ImageTriggers] Image change build triggers TestSimpleImageChangeBuildTriggerFromImageStreamTagDocker [Suite:openshift/conformance/parallel]":                                                                                         {},
		"[sig-imageregistry][Feature:ImageLookup] Image policy should perform lookup when the Deployment gets the resolve-names annotation later [Suite:openshift/conformance/parallel]":                                                                                  {},
		"[sig-devex][Feature:Templates] template-api TestTemplateTransformationFromConfig [Suite:openshift/conformance/parallel]":                                                                                                                                         {},
		"[sig-cli] oc explain list uncovered GroupVersionResources [Suite:openshift/conformance/parallel]":                                                                                                                                                                {},
		"[sig-cli] oc debug ensure debug does not depend on a container actually existing for the selected resource [Suite:openshift/conformance/parallel]":                                                                                                               {},
		"[sig-cli] oc adm role-reapers [Suite:openshift/conformance/parallel]":                                                                                                                                                                                            {},
		"[sig-cli] oc adm must-gather runs successfully with options [Suite:openshift/conformance/parallel]":                                                                                                                                                              {},
		"[sig-cli] oc adm groups [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                  {},
		"[sig-auth][Feature:RoleBindingRestrictions] RoleBindingRestrictions should be functional  Create a rolebinding when subject is not already bound and is not permitted by any RBR should fail [Suite:openshift/conformance/parallel]":                             {},
		"[sig-auth][Feature:RoleBindingRestrictions] RoleBindingRestrictions should be functional  Create a rolebinding when subject is already bound should succeed [Suite:openshift/conformance/parallel]":                                                              {},
		"[sig-auth][Feature:OpenShiftAuthorization] self-SAR compatibility  TestSelfSubjectAccessReviewsNonExistingNamespace should succeed [Suite:openshift/conformance/parallel]":                                                                                       {},
		"[sig-auth][Feature:OpenShiftAuthorization] RBAC proxy for openshift authz  RunLegacyClusterRoleBindingEndpoint should succeed [Suite:openshift/conformance/parallel]":                                                                                            {},
		"[sig-auth][Feature:OAuthServer] [Headers] expected headers returned from the login URL for when there is only one IDP [Suite:openshift/conformance/parallel]":                                                                                                    {},
		"[sig-arch] ocp payload should be based on existing source OLM version should contain the source commit id [Suite:openshift/conformance/parallel]":                                                                                                                {},
		"[sig-arch] Managed cluster should ensure pods use downstream images from our release image with proper ImagePullPolicy [Suite:openshift/conformance/parallel]":                                                                                                   {},
		"[sig-apps][Feature:OpenShiftControllerManager] TestTriggers_imageChange [Suite:openshift/conformance/parallel]":                                                                                                                                                  {},
		"[sig-apps][Feature:OpenShiftControllerManager] TestTriggers_MultipleICTs [Suite:openshift/conformance/parallel]":                                                                                                                                                 {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs ignores deployer and lets the config with a NewReplicationControllerCreated reason should let the deployment config with a NewReplicationControllerCreated reason [Suite:openshift/conformance/parallel]": {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for user.openshift.io/v1, Resource=users [Suite:openshift/conformance/parallel]":                                                                                                      {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for template.openshift.io/v1, Resource=templates [Suite:openshift/conformance/parallel]":                                                                                              {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for template.openshift.io/v1, Resource=templateinstances [Suite:openshift/conformance/parallel]":                                                                                      {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for oauth.openshift.io/v1, Resource=oauthclientauthorizations [Suite:openshift/conformance/parallel]":                                                                                 {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for oauth.openshift.io/v1, Resource=oauthauthorizetokens [Suite:openshift/conformance/parallel]":                                                                                      {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for build.openshift.io/v1, Resource=buildconfigs [Suite:openshift/conformance/parallel]":                                                                                              {},
		"[sig-cli] oc service creates and deletes services [Suite:openshift/conformance/parallel]":                                                                                                                                                                        {},
		"[sig-cli] oc project --show-labels works for projects [Suite:openshift/conformance/parallel]":                                                                                                                                                                    {},
		"[sig-cli] oc basics can create and interact with a list of resources [Suite:openshift/conformance/parallel]":                                                                                                                                                     {},
		"[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (filesystem volmode)] volumeLimits should support volume limits [Serial] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                             {},
		"[sig-imageregistry][Feature:ImageTriggers][Serial] ImageStream admission TestImageStreamAdmitStatusUpdate [Suite:openshift/conformance/serial]":                                                                                                                  {},
		"[sig-imageregistry][Feature:ImageTriggers][Serial] ImageStream admission TestImageStreamAdmitSpecUpdate [Suite:openshift/conformance/serial]":                                                                                                                    {},
		"[sig-imageregistry][Feature:ImageTriggers][Serial] ImageStream API TestImageStreamTagLifecycleHook [Suite:openshift/conformance/serial]":                                                                                                                         {},
		"[sig-auth][Feature:LDAP][Serial] ldap group sync can sync groups from ldap [Suite:openshift/conformance/serial]":                                                                                                                                                 {},
		"[sig-instrumentation] Prometheus when installed on the cluster should have a AlertmanagerReceiversNotConfigured alert in firing state [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                             {},
		"[sig-cli] oc debug ensure it works with image streams [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                             {},
		"[sig-network][Feature:Router] The HAProxy router should serve routes that were created from an ingress [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                            {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications with PVCs [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                  {},
		"[sig-network] services basic functionality should allow connections to another pod on the same node via a service IP [Suite:openshift/conformance/parallel]":                                                                                                     {},
		"[sig-imageregistry][Feature:Image] oc tag should preserve image reference for external images [Suite:openshift/conformance/parallel]":                                                                                                                            {},
		"[sig-imageregistry][Feature:ImageTriggers] Image change build triggers TestSimpleImageChangeBuildTriggerFromImageStreamTagSTIWithConfigChange [Suite:openshift/conformance/parallel]":                                                                            {},
		"[sig-imageregistry][Feature:ImageLayers] Image layer subresource should identify a deleted image as missing [Suite:openshift/conformance/parallel]":                                                                                                              {},
		"[sig-devex][Feature:Templates] templateinstance cross-namespace test should create and delete objects across namespaces [Suite:openshift/conformance/parallel]":                                                                                                  {},
		"[sig-devex][Feature:Templates] template-api TestTemplate [Suite:openshift/conformance/parallel]":                                                                                                                                                                 {},
		"[sig-cli] oc observe works as expected [Suite:openshift/conformance/parallel]":                                                                                                                                                                                   {},
		"[sig-cli] oc adm serviceaccounts [Suite:openshift/conformance/parallel]":                                                                                                                                                                                         {},
		"[sig-cli] oc adm node-logs [Suite:openshift/conformance/parallel]":                                                                                                                                                                                               {},
		"[sig-cli] oc adm build-chain [Suite:openshift/conformance/parallel]":                                                                                                                                                                                             {},
		"[sig-builds][Feature:Builds][webhook] TestWebhookGitHubPushWithImageStream [Suite:openshift/conformance/parallel]":                                                                                                                                               {},
		"[sig-builds][Feature:Builds][webhook] TestWebhookGitHubPing [Suite:openshift/conformance/parallel]":                                                                                                                                                              {},
		"[sig-builds][Feature:Builds] remove all builds when build configuration is removed  oc delete buildconfig should start builds and delete the buildconfig [Suite:openshift/conformance/parallel]":                                                                 {},
		"[sig-builds][Feature:Builds] buildconfig secret injector  should inject secrets to the appropriate buildconfigs [Suite:openshift/conformance/parallel]":                                                                                                          {},
		"[sig-auth][Feature:RoleBindingRestrictions] RoleBindingRestrictions should be functional  Rolebinding restrictions tests single project should succeed [Suite:openshift/conformance/parallel]":                                                                   {},
		"[sig-auth][Feature:RoleBindingRestrictions] RoleBindingRestrictions should be functional  Create a rolebinding that also contains system:non-existing users should succeed [Suite:openshift/conformance/parallel]":                                               {},
		"[sig-auth][Feature:OpenShiftAuthorization] scopes TestTokensWithIllegalScopes should succeed [Suite:openshift/conformance/parallel]":                                                                                                                             {},
		"[sig-auth][Feature:OpenShiftAuthorization] scopes TestScopedTokens should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                        {},
		"[sig-auth][Feature:OpenShiftAuthorization] scopes TestScopeEscalations should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                    {},
		"[sig-auth][Feature:OpenShiftAuthorization] authorization  TestBrowserSafeAuthorizer should succeed [Suite:openshift/conformance/parallel]":                                                                                                                       {},
		"[sig-auth][Feature:OpenShiftAuthorization] RBAC proxy for openshift authz  RunLegacyLocalRoleEndpoint should succeed [Suite:openshift/conformance/parallel]":                                                                                                     {},
		"[sig-auth][Feature:OpenShiftAuthorization] RBAC proxy for openshift authz  RunLegacyEndpointConfirmNoEscalation should succeed [Suite:openshift/conformance/parallel]":                                                                                           {},
		"[sig-auth][Feature:OAuthServer] [Token Expiration] Using a OAuth client with a non-default token max age to generate tokens that do not expire works as expected when using a token authorization flow [Suite:openshift/conformance/parallel]":                   {},
		"[sig-auth][Feature:OAuthServer] [Headers] expected headers returned from the grant URL [Suite:openshift/conformance/parallel]":                                                                                                                                   {},
		"[sig-auth][Feature:OAuthServer] OAuth server has the correct token and certificate fallback semantics [Suite:openshift/conformance/parallel]":                                                                                                                    {},
		"[sig-auth][Feature:OAuthServer] OAuth Authenticator accepts sha256 access tokens [Suite:openshift/conformance/parallel]":                                                                                                                                         {},
		"[sig-auth][Feature:OAuthServer] ClientSecretWithPlus should create oauthclient [Suite:openshift/conformance/parallel]":                                                                                                                                           {},
		"[sig-auth][Feature:Authentication]  TestFrontProxy should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                                        {},
		"[sig-apps][Feature:OpenShiftControllerManager] TestTriggers_imageChange_nonAutomatic [Suite:openshift/conformance/parallel]":                                                                                                                                     {},
		"[sig-apps][Feature:OpenShiftControllerManager] TestTriggers_configChange [Suite:openshift/conformance/parallel]":                                                                                                                                                 {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs when run iteratively should immediately start a new deployment [Suite:openshift/conformance/parallel]":                                                                                                    {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for build.openshift.io/v1, Resource=builds [Suite:openshift/conformance/parallel]":                                                                                                    {},
		"[sig-cli] oc status returns expected help messages [Suite:openshift/conformance/parallel]":                                                                                                                                                                       {},
		"[sig-cli] oc basics can describe an OAuth access token [Suite:openshift/conformance/parallel]":                                                                                                                                                                   {},
		"[Conformance][sig-api-machinery][Feature:APIServer] local kubeconfig \"lb-int.kubeconfig\" should be present on all masters and work [Suite:openshift/conformance/parallel/minimal]":                                                                             {},
		"[sig-network][Feature:Router] The HAProxy router should serve the correct routes when scoped to a single namespace and label set [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                  {},
		"[sig-network][Feature:Router] The HAProxy router should override the route host with a custom value [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                               {},
		"[sig-instrumentation] Prometheus when installed on the cluster should provide named network metrics [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                               {},
		"[sig-cli] oc rsh specific flags should work well when access to a remote shell [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                    {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs paused should disable actions on deployments [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                               {},
		"Symptom Detection.Undiagnosed panic detected in pod": {},
		"[sig-imageregistry][Feature:ImageInfo] Image info should display information about images [Skipped:Disconnected] [Suite:openshift/conformance/parallel]": {},
		"[sig-network] Internal connectivity for TCP and UDP on ports 9000-9999 is allowed [Serial:Self] [Suite:openshift/conformance/parallel]":                  {},
		"[sig-network] NetworkPolicyLegacy [LinuxOnly] NetworkPolicy between server and client should enforce egress policy allowing traffic to a server in a different namespace based on PodSelector and NamespaceSelector [Feature:NetworkPolicy] [Skipped:Network/OpenShiftSDN/Multitenant] [Skipped:Network/OpenShiftSDN] [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-network] pods should successfully create sandboxes by not timing out":                                                                                                                                                                                {},
		"[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should provide basic identity [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                               {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (block volmode)] volumeMode should not mount / map unused volumes in a pod [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                    {},
		"[sig-node][Late] should not have pod creation failures due to systemd timeouts [Suite:openshift/conformance/parallel]":                                                                                                                                    {},
		"[sig-arch][Late] clients should not use APIs that are removed in upcoming releases [Suite:openshift/conformance/parallel]":                                                                                                                                {},
		"[sig-api-machinery][Feature:APIServer][Late] kubelet terminates kube-apiserver gracefully [Suite:openshift/conformance/parallel]":                                                                                                                         {},
		"[sig-api-machinery][Feature:APIServer][Late] kube-apiserver terminates within graceful termination period [Suite:openshift/conformance/parallel]":                                                                                                         {},
		"[sig-api-machinery][Feature:APIServer][Late] API LBs follow /readyz of kube-apiserver and stop sending requests [Suite:openshift/conformance/parallel]":                                                                                                   {},
		"[sig-api-machinery][Feature:APIServer][Late] API LBs follow /readyz of kube-apiserver and don't send request early [Suite:openshift/conformance/parallel]":                                                                                                {},
		"[sig-storage][Late] Metrics should report short mount times [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                {},
		"[sig-storage][Late] Metrics should report short attach times [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                               {},
		"[sig-instrumentation][Late] Alerts shouldn't exceed the 500 series limit of total series sent via telemetry from each cluster [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                              {},
		"[sig-network] network isolation when using OpenshiftSDN in a mode that does not isolate namespaces by default should allow communication between pods in different namespaces on the same node [Suite:openshift/conformance/parallel]":                    {},
		"[sig-imageregistry][Feature:Image] signature TestImageRemoveSignature [Suite:openshift/conformance/parallel]":                                                                                                                                             {},
		"[sig-imageregistry][Feature:ImageLookup] Image policy should update standard Kube object image fields when local names are on [Suite:openshift/conformance/parallel]":                                                                                     {},
		"[sig-devex][Feature:Templates] templateinstance creation with invalid object reports error  should report a failure on creation [Suite:openshift/conformance/parallel]":                                                                                   {},
		"[sig-devex][Feature:OpenShiftControllerManager] TestAutomaticCreationOfPullSecrets [Suite:openshift/conformance/parallel]":                                                                                                                                {},
		"[sig-cluster-lifecycle] CSRs from machines that are not recognized by the cloud provider are not approved [Suite:openshift/conformance/parallel]":                                                                                                         {},
		"[sig-cli] oc explain should contain proper fields description for special types [Suite:openshift/conformance/parallel]":                                                                                                                                   {},
		"[sig-cli] oc debug does not require a real resource on the server [Suite:openshift/conformance/parallel]":                                                                                                                                                 {},
		"[sig-cli] oc debug dissect deployment config debug [Suite:openshift/conformance/parallel]":                                                                                                                                                                {},
		"[sig-cli] oc adm must-gather when looking at the audit logs [sig-node] kubelet runs apiserver processes strictly sequentially in order to not risk audit log corruption [Suite:openshift/conformance/parallel]":                                           {},
		"[sig-cli] oc adm must-gather runs successfully for audit logs [Suite:openshift/conformance/parallel]":                                                                                                                                                     {},
		"[sig-cli] oc adm cluster-role-reapers [Suite:openshift/conformance/parallel]":                                                                                                                                                                             {},
		"[sig-cli] oc --request-timeout works as expected [Suite:openshift/conformance/parallel]":                                                                                                                                                                  {},
		"[sig-builds][Feature:Builds][webhook] TestWebhook [Suite:openshift/conformance/parallel]":                                                                                                                                                                 {},
		"[sig-auth][Feature:UserAPI] users can manipulate groups [Suite:openshift/conformance/parallel]":                                                                                                                                                           {},
		"[sig-auth][Feature:SecurityContextConstraints]  TestPodUpdateSCCEnforcement [Suite:openshift/conformance/parallel]":                                                                                                                                       {},
		"[sig-auth][Feature:SecurityContextConstraints]  TestAllowedSCCViaRBAC [Suite:openshift/conformance/parallel]":                                                                                                                                             {},
		"[sig-auth][Feature:RoleBindingRestrictions] RoleBindingRestrictions should be functional  Create a RBAC rolebinding when subject is not already bound and is not permitted by any RBR should fail [Suite:openshift/conformance/parallel]":                 {},
		"[sig-auth][Feature:ProjectAPI]  TestUnprivilegedNewProject [Suite:openshift/conformance/parallel]":                                                                                                                                                        {},
		"[sig-auth][Feature:ProjectAPI]  TestProjectIsNamespace should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                             {},
		"[sig-auth][Feature:OpenShiftAuthorization] scopes TestUnknownScopes should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                {},
		"[sig-auth][Feature:OpenShiftAuthorization] authorization  TestAuthorizationSubjectAccessReviewAPIGroup should succeed [Suite:openshift/conformance/parallel]":                                                                                             {},
		"[sig-auth][Feature:OpenShiftAuthorization] RBAC proxy for openshift authz  RunLegacyLocalRoleBindingEndpoint should succeed [Suite:openshift/conformance/parallel]":                                                                                       {},
		"[sig-auth][Feature:OAuthServer] well-known endpoint should be reachable [Suite:openshift/conformance/parallel]":                                                                                                                                           {},
		"[sig-auth][Feature:OAuthServer] [Headers] expected headers returned from the login URL for the bootstrap IDP [Suite:openshift/conformance/parallel]":                                                                                                      {},
		"[sig-auth][Feature:OAuthServer] [Headers] expected headers returned from the login URL for the allow all IDP [Suite:openshift/conformance/parallel]":                                                                                                      {},
		"[sig-apps][Feature:OpenShiftControllerManager] TestTriggers_manual [Suite:openshift/conformance/parallel]":                                                                                                                                                {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for user.openshift.io/v1, Resource=identities [Suite:openshift/conformance/parallel]":                                                                                          {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for route.openshift.io/v1, Resource=routes [Suite:openshift/conformance/parallel]":                                                                                             {},
		"[sig-api-machinery][Feature:ServerSideApply] Server-Side Apply should work for oauth.openshift.io/v1, Resource=oauthaccesstokens [Suite:openshift/conformance/parallel]":                                                                                  {},
		"[sig-network][endpoints] admission blocks manual creation of EndpointSlices pointing to the cluster or service network [Suite:openshift/conformance/parallel]":                                                                                            {},
		"[sig-network][Feature:Multus] should use multus to create net1 device from network-attachment-definition [Suite:openshift/conformance/parallel]":                                                                                                          {},
		"[sig-network-edge][Feature:Idling] Idling with a single service and ReplicationController should idle the service and ReplicationController properly [Suite:openshift/conformance/parallel]":                                                              {},
		"[sig-cli] oc label pod [Suite:openshift/conformance/parallel]":                                                                                                                                                                                            {},
		"[sig-cli] oc basics can create deploymentconfig and clusterquota [Suite:openshift/conformance/parallel]":                                                                                                                                                  {},
		"[sig-auth][Feature:ProjectAPI]  TestScopedProjectAccess should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                            {},
		"[Conformance][sig-api-machinery][Feature:APIServer] local kubeconfig \"localhost.kubeconfig\" should be present on all masters and work [Suite:openshift/conformance/parallel/minimal]":                                                                   {},
		"[Conformance][sig-api-machinery][Feature:APIServer] local kubeconfig \"localhost-recovery.kubeconfig\" should be present on all masters and work [Suite:openshift/conformance/parallel/minimal]":                                                          {},
		"[sig-network] services when using OpenshiftSDN in a mode that does not isolate namespaces by default should allow connections to pods in different namespaces on different nodes via service IPs [Suite:openshift/conformance/parallel]":                  {},
		"[sig-network][Feature:Router] The HAProxy router should expose the profiling endpoints [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                     {},
		"[sig-network][Feature:Router] The HAProxy router should expose a health check on the metrics port [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                          {},
		"[sig-network][Feature:Router] The HAProxy router should enable openshift-monitoring to pull metrics [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                        {},
		"[sig-apps][Feature:Jobs] Users should be able to create and run a job in a user project [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                    {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs won't deploy RC with unresolved images when patched with empty image [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs with enhanced status should include various info in status [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                          {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs should respect image stream tag reference policy resolve the image pull spec [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                        {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs generation should deploy based on a status version bump [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                             {},
		"[sig-builds][Feature:Builds] build without output image  building from templates should create an image from a docker template without an output image reference defined [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                   {},
		"[sig-builds][Feature:Builds] build with empty source  started build should build even with an empty source in build config [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                 {},
		"[sig-network][Feature:Router] The HAProxy router should support reencrypt to services backed by a serving certificate automatically [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                        {},
		"[sig-network][Feature:Router] The HAProxy router should respond with 503 to unrecognized hosts [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                             {},
		"[sig-cluster-lifecycle][Feature:Machines][Early] Managed cluster should have same number of Machines and Nodes [Suite:openshift/conformance/parallel]":                                                                                                    {},
		"[sig-network] services when using OpenshiftSDN in a mode that does not isolate namespaces by default should allow connections to pods in different namespaces on the same node via service IPs [Suite:openshift/conformance/parallel]":                    {},
		"[sig-cli] oc adm who-can [Suite:openshift/conformance/parallel]":                                                                                                                                                                                          {},
		"[sig-cli] oc adm user-creation [Suite:openshift/conformance/parallel]":                                                                                                                                                                                    {},
		"[sig-builds][Feature:Builds][webhook] TestWebhookGitHubPushWithImage [Suite:openshift/conformance/parallel]":                                                                                                                                              {},
		"[sig-auth][Feature:UserAPI] groups should work [Suite:openshift/conformance/parallel]":                                                                                                                                                                    {},
		"[sig-auth][Feature:OAuthServer] [Token Expiration] Using a OAuth client with a non-default token max age to generate tokens that expire shortly works as expected when using a token authorization flow [Suite:openshift/conformance/parallel]":           {},
		"[sig-auth][Feature:OAuthServer] [Headers] expected headers returned from the token URL [Suite:openshift/conformance/parallel]":                                                                                                                            {},
		"[sig-auth][Feature:OAuthServer] [Headers] expected headers returned from the logout URL [Suite:openshift/conformance/parallel]":                                                                                                                           {},
		"[sig-auth][Feature:LDAP] LDAP should start an OpenLDAP test server [Suite:openshift/conformance/parallel]":                                                                                                                                                {},
		"[sig-auth][Feature:HTPasswdAuth] HTPasswd IDP should successfully configure htpasswd and be responsive [Suite:openshift/conformance/parallel]":                                                                                                            {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs keep the deployer pod invariant valid should deal with config change in case the deployment is still running [Suite:openshift/conformance/parallel]":                                               {},
		"[sig-api-machinery][Feature:ClusterResourceQuota] Cluster resource quota should control resource limits across namespaces [Suite:openshift/conformance/parallel]":                                                                                         {},
		"[sig-api-machinery][Feature:APIServer] anonymous browsers should get a 403 from / [Suite:openshift/conformance/parallel]":                                                                                                                                 {},
		"[Conformance][sig-api-machinery][Feature:APIServer] local kubeconfig \"lb-ext.kubeconfig\" should be present on all masters and work [Suite:openshift/conformance/parallel/minimal]":                                                                      {},
		"[sig-cli] oc statefulset creates and deletes statefulsets [Suite:openshift/conformance/parallel]":                                                                                                                                                         {},
		"[sig-cli] oc basics can patch resources [Suite:openshift/conformance/parallel]":                                                                                                                                                                           {},
		"[sig-network][Feature:Router] The HAProxy router should override the route host for overridden domains with a custom value [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                 {},
		"[sig-instrumentation] Prometheus when installed on the cluster shouldn't have failing rules evaluation [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                     {},
		"[sig-instrumentation] Prometheus when installed on the cluster should provide ingress metrics [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                              {},
		"[sig-instrumentation] Prometheus when installed on the cluster should have important platform topology metrics [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                             {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs when tagging images should successfully tag the deployed image [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                      {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs when changing image change trigger should successfully trigger from an updated image [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs keep the deployer pod invariant valid should deal with cancellation after deployer pod succeeded [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                    {},
		"[sig-cluster-lifecycle] Pods cannot access the /config/master API endpoint [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                 {},
		"[sig-network][Feature:Router] The HAProxy router should set Forwarded headers appropriately [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                {},
		"[sig-instrumentation][Late] OpenShift alerting rules should have description and summary annotations [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                       {},
		"[sig-instrumentation][Late] OpenShift alerting rules should have a valid severity label [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                    {},
		"[sig-instrumentation][Late] OpenShift alerting rules should have a runbook_url annotation if the alert is critical [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                         {},
		"[sig-arch] Managed cluster should should expose cluster services outside the cluster [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                       {},
		"[sig-network-edge][Conformance][Area:Networking][Feature:Router] The HAProxy router should be able to connect to a service that is idled because a GET on the route will unidle it [Skipped:Disconnected] [Suite:openshift/conformance/parallel/minimal]": {},
		"Operator upgrade machine-config":                                           {},
		"promote-release-openshift-machine-os-content-e2e-aws-4.10-ppc64le.Overall": {},
		"[sig-network][Feature:Router] The HAProxy router converges when multiple routers are writing status [Suite:openshift/conformance/parallel]":                                                                                                      {},
		"[sig-network][Feature:Router] The HAProxy router converges when multiple routers are writing conflicting status [Suite:openshift/conformance/parallel]":                                                                                          {},
		"[sig-imageregistry][Feature:ImageTriggers] Image change build triggers TestSimpleImageChangeBuildTriggerFromImageStreamTagCustom [Suite:openshift/conformance/parallel]":                                                                         {},
		"[sig-devex][Feature:Templates] templateinstance security tests  should pass security tests [Suite:openshift/conformance/parallel]":                                                                                                               {},
		"[sig-cli] oc explain should contain proper spec+status for CRDs [Suite:openshift/conformance/parallel]":                                                                                                                                          {},
		"[sig-cli] oc adm ui-project-commands [Suite:openshift/conformance/parallel]":                                                                                                                                                                     {},
		"[sig-cli] oc adm role-selectors [Suite:openshift/conformance/parallel]":                                                                                                                                                                          {},
		"[sig-cli] oc adm new-project [Suite:openshift/conformance/parallel]":                                                                                                                                                                             {},
		"[sig-auth][Feature:ProjectAPI]  TestInvalidRoleRefs should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                       {},
		"[sig-auth][Feature:OpenShiftAuthorization] The default cluster RBAC policy should have correct RBAC rules [Suite:openshift/conformance/parallel]":                                                                                                {},
		"[sig-arch] [Conformance] FIPS TestFIPS [Suite:openshift/conformance/parallel/minimal]":                                                                                                                                                           {},
		"[sig-apps][Feature:OpenShiftControllerManager] TestDeployScale [Suite:openshift/conformance/parallel]":                                                                                                                                           {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs initially should not deploy if pods never transition to ready [Suite:openshift/conformance/parallel]":                                                                                     {},
		"[sig-network][Feature:Router] The HAProxy router should serve a route that points to two services and respect weights [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                             {},
		"[sig-network][Feature:Router] The HAProxy router should run even if it has no access to update status [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                             {},
		"[sig-imageregistry][Feature:ImageTriggers] Annotation trigger reconciles after the image is overwritten [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                           {},
		"[sig-auth][Feature:SecurityContextConstraints]  TestPodDefaultCapabilities [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                        {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs with env in params referencing the configmap should expand the config map key to a value [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                   {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs viewing rollout history should print the rollout history [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                   {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs rolled back should rollback to an older deployment [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                         {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs  should adhere to Three Laws of Controllers [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                {},
		"[sig-imageregistry][Feature:Image] oc tag should change image reference for internal images [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                       {},
		"[sig-cli] oc builds new-build [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                     {},
		"[sig-builds][Feature:Builds] verify /run filesystem contents  are writeable using a simple Docker Strategy Build [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                  {},
		"[sig-builds][Feature:Builds] build have source revision metadata  started build should contain source revision information [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                        {},
		"[sig-network] multicast when using one of the OpenshiftSDN modes 'redhat/openshift-ovs-multitenant, redhat/openshift-ovs-networkpolicy' should allow multicast traffic in namespaces where it is enabled [Suite:openshift/conformance/parallel]": {},
		"[sig-instrumentation] Prometheus when installed on the cluster should report telemetry [Late] [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                     {},
		"[sig-cluster-lifecycle] cluster upgrade should complete in 90.00 minutes":                                                                                                                                                                        {},
		"[sig-imageregistry][Feature:ImageTriggers] Image change build triggers TestSimpleImageChangeBuildTriggerFromImageStreamTagCustomWithConfigChange [Suite:openshift/conformance/parallel]":                                                         {},
		"[sig-auth][Feature:OAuthServer] [Token Expiration] Using a OAuth client with a non-default token max age to generate tokens that do not expire works as expected when using a code authorization flow [Suite:openshift/conformance/parallel]":    {},
		"[sig-auth][Feature:OAuthServer] [Headers] expected headers returned from the authorize URL [Suite:openshift/conformance/parallel]":                                                                                                               {},
		"[sig-auth][Feature:LDAP] LDAP IDP should authenticate against an ldap server [Suite:openshift/conformance/parallel]":                                                                                                                             {},
		"Operator upgrade openshift-apiserver": {},
		"[sig-builds][Feature:Builds][volumes] build volumes  should mount given secrets and configmaps into the build pod for source strategy builds [Suite:openshift/conformance/parallel]":                                                                          {},
		"[sig-network] services basic functionality should allow connections to another pod on a different node via a service IP [Suite:openshift/conformance/parallel]":                                                                                               {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs with test deployments should run a deployment to completion and then scale to zero [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                      {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs when run iteratively should only deploy the last deployment [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                             {},
		"[sig-imageregistry][Feature:ImageLayers] Image layer subresource should return layers from tagged images [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                       {},
		"[sig-builds][Feature:Builds] result image should have proper labels set  S2I build from a template should create a image from \"test-s2i-build.json\" template with proper Docker labels [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":       {},
		"[sig-builds][Feature:Builds] result image should have proper labels set  Docker build from a template should create a image from \"test-docker-build.json\" template with proper Docker labels [Skipped:Disconnected] [Suite:openshift/conformance/parallel]": {},
		"[sig-builds][Feature:Builds] build without output image  building from templates should create an image from a S2i template without an output image reference defined [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                          {},
		"[sig-builds][Feature:Builds] Optimized image builds  should succeed [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                            {},
		"[sig-network-edge][Conformance][Area:Networking][Feature:Router] The HAProxy router should pass the gRPC interoperability tests [Suite:openshift/conformance/parallel/minimal]":                                                                               {},
		"[sig-devex][Feature:Templates] templateinstance impersonation tests should pass impersonation update tests [Suite:openshift/conformance/parallel]":                                                                                                            {},
		"[sig-devex][Feature:Templates] templateinstance impersonation tests should pass impersonation deletion tests [Suite:openshift/conformance/parallel]":                                                                                                          {},
		"[sig-auth][Feature:ProjectAPI]  TestProjectWatchWithSelectionPredicate should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                 {},
		"[sig-auth][Feature:ProjectAPI]  TestProjectWatch should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                                       {},
		"[sig-auth][Feature:OAuthServer] [Token Expiration] Using a OAuth client with a non-default token max age to generate tokens that expire shortly works as expected when using a code authorization flow [Suite:openshift/conformance/parallel]":                {},
		"[sig-cli] oc can run inside of a busybox container [Suite:openshift/conformance/parallel]":                                                                                                                                                                    {},
		"[sig-builds][Feature:Builds][volumes] build volumes  should mount given secrets and configmaps into the build pod for docker strategy builds [Suite:openshift/conformance/parallel]":                                                                          {},
		"[sig-network] multicast when using one of the OpenshiftSDN modes 'redhat/openshift-ovs-multitenant, redhat/openshift-ovs-networkpolicy' should block multicast traffic in namespaces where it is disabled [Suite:openshift/conformance/parallel]":             {},
		"[sig-network][Feature:Router] The HAProxy router should expose prometheus metrics for a route [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                  {},
		"[sig-builds][Feature:Builds] prune builds based on settings in the buildconfig  buildconfigs should have a default history limit set when created via the group api [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                            {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs with failing hook should get all logs from retried hooks [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs with custom deployments should run the custom deployment steps [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                          {},
		"[sig-instrumentation][sig-builds][Feature:Builds] Prometheus when installed on the cluster should start and expose a secured proxy and verify build metrics [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                    {},
		"[sig-cli] oc debug deployment configs from a build [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                             {},
		"[sig-builds][Feature:Builds][timing] capture build stages and durations  should record build stages and durations for docker [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                   {},
		"[sig-builds][Feature:Builds] s2i build with a quota  Building from a template should create an s2i build with a quota and run it [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                               {},
		"Operator upgrade authentication": {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Inline-volume (ext4)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                    {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                              {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":              {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with different fsgroup applied to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":         {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (Always)[LinuxOnly], pod created with an initial fsgroup, new pod fsgroup applied to volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                            {},
		"[sig-auth][Feature:OpenShiftAuthorization] authorization  TestAuthorizationSubjectAccessReview should succeed [Suite:openshift/conformance/parallel]":                                                                                                                                                                                             {},
		"[sig-builds][Feature:Builds][valueFrom] process valueFrom in build strategy environment variables  should fail resolving unresolvable valueFrom in sti build environment variable references [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                       {},
		"[sig-builds][Feature:Builds] oc new-app  should fail with a --name longer than 58 characters [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                                       {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs with revision history limits should never persist more old deployments than acceptable after being observed by the controller [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                               {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs with minimum ready seconds set should not transition the deployment to Complete before satisfied [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                            {},
		"[sig-builds][Feature:Builds][timing] capture build stages and durations  should record build stages and durations for s2i [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                          {},
		"[sig-builds][Feature:Builds] verify /run filesystem contents  do not have unexpected content using a simple Docker Strategy Build [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                  {},
		"[sig-network] pods should successfully create sandboxes by writing network status": {},
		"operator conditions  machine-config":                                               {},
		"[sig-devex][Feature:Templates] templateinstance impersonation tests should pass impersonation creation tests [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                         {},
		"[sig-network-edge][Feature:Idling] Unidling should work with UDP [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                                                                     {},
		"[sig-builds][Feature:Builds] prune builds based on settings in the buildconfig  should prune errored builds based on the failedBuildsHistoryLimit setting [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                     {},
		"[sig-builds][Feature:Builds] prune builds based on settings in the buildconfig  should prune canceled builds based on the failedBuildsHistoryLimit setting [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                    {},
		"[sig-builds][Feature:Builds] prune builds based on settings in the buildconfig  should prune builds after a buildConfig change [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                {},
		"[sig-builds][Feature:Builds][pullsecret] docker build using a pull secret  Building from a template should create a docker build that pulls using a secret run it [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                             {},
		"[sig-builds][Feature:Builds] s2i build with a root user image should create a root build and pass with a privileged SCC [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                       {},
		"[sig-imageregistry][Feature:ImageExtract] Image extract should extract content from an image [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                  {},
		"[sig-devex] check registry.redhat.io is available and samples operator can import sample imagestreams run sample related validations [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                          {},
		"[sig-builds][Feature:Builds][valueFrom] process valueFrom in build strategy environment variables  should fail resolving unresolvable valueFrom in docker build environment variable references [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                               {},
		"[sig-builds][Feature:Builds] prune builds based on settings in the buildconfig  should prune failed builds based on the failedBuildsHistoryLimit setting [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                      {},
		"[sig-storage] [Serial] Volume metrics should create volume metrics in Volume Manager [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                                                       {},
		"[sig-builds][Feature:Builds] clone repository using git:// protocol  should clone using git:// if no proxy is configured [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                      {},
		"[sig-instrumentation] Prometheus metrics should be available after an upgrade":                                                                                                                                                                                                                                                                               {},
		"[sig-devex][Feature:Templates] templateinstance readiness test  should report failed soon after an annotated objects has failed [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                               {},
		"[sig-builds][Feature:Builds] oc new-app  should succeed with an imagestream [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                                   {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs adoption will orphan all RCs and adopt them back when recreated [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                        {},
		"[sig-builds][Feature:Builds] Multi-stage image builds should succeed [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                                          {},
		"[sig-node] Managed cluster should report ready nodes the entire duration of the test run [Late] [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                                               {},
		"[sig-cli] oc adm must-gather runs successfully [Suite:openshift/conformance/parallel]":                                                                                                                                                                                                                                                                       {},
		"[sig-builds][Feature:Builds][valueFrom] process valueFrom in build strategy environment variables  should successfully resolve valueFrom in s2i build environment variables [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                   {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                       {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (ext4)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                                            {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                                                                                                                                      {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] fsgroupchangepolicy (OnRootMismatch)[LinuxOnly], pod created with an initial fsgroup, volume contents ownership changed in first pod, new pod with same fsgroup skips ownership changes to the volume contents [Suite:openshift/conformance/parallel] [Suite:k8s]": {},
		"[sig-instrumentation] Prometheus when installed on the cluster should start and expose a secured proxy and unsecured metrics [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                  {},
		"[sig-builds][Feature:Builds] imagechangetriggers  imagechangetriggers should trigger builds of all types [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                                                                      {},
		"[sig-scheduling] Multi-AZ Clusters should spread the pods of a service across zones [Serial] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                                                                                                                                               {},
		"Symptom Detection.Node process segfaulted": {},
		"[sig-network-edge][Feature:Idling] Unidling should work with TCP (when fully idled) [Skipped:Network/OVNKubernetes] [Suite:openshift/conformance/parallel]":                                                                                   {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs with multiple image change triggers should run a successful deployment with a trigger used by different containers [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":      {},
		"[sig-builds][Feature:Builds][valueFrom] process valueFrom in build strategy environment variables  should successfully resolve valueFrom in docker build environment variables [Skipped:Disconnected] [Suite:openshift/conformance/parallel]": {},
		"[sig-devex][Feature:Templates] templateinstance readiness test  should report ready soon after all annotated objects are ready [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                 {},
		"[sig-network-edge] OAuth remains available via cluster frontend ingress using reused connections":                                                                                                                                             {},
		"[sig-cli] oc builds complex build start-build [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                  {},
		"[sig-network] IngressClass [Feature:Ingress] should set default value on new IngressClass [Serial] [Suite:openshift/conformance/serial] [Suite:k8s]":                                                                                          {},
		"[sig-imageregistry][Serial] Image signature workflow can push a signed image to openshift registry and verify it [Suite:openshift/conformance/serial]":                                                                                        {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Inline-volume (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                   {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":                                              {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Dynamic PV (default fs)] subPath should be able to unmount after the subpath directory is deleted [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]":            {},
		"[sig-network-edge][Conformance][Area:Networking][Feature:Router] The HAProxy router should pass the http2 tests [Suite:openshift/conformance/parallel/minimal]":                                                                               {},
		"[sig-cli] oc builds complex build webhooks CRUD [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                                                {},
		"[sig-builds][Feature:Builds] prune builds based on settings in the buildconfig  should prune completed builds based on the successfulBuildsHistoryLimit setting [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                {},
		"[sig-apps][Feature:DeploymentConfig] deploymentconfigs with multiple image change triggers should run a successful deployment with multiple triggers [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                           {},
		"[sig-imageregistry][Feature:ImageAppend] Image append should create images by appending them [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                   {},
		"[sig-network-edge][Conformance][Area:Networking][Feature:Router] The HAProxy router should pass the h2spec conformance tests [Suite:openshift/conformance/parallel/minimal]":                                                                  {},
		"[sig-instrumentation] Prometheus when installed on the cluster shouldn't report any alerts in firing state apart from Watchdog and AlertmanagerReceiversNotConfigured [Early] [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":  {},
		"[sig-builds][Feature:Builds] custom build with buildah  being created from new-build should complete build with custom builder image [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                           {},
		"[sig-cli] oc adm storage-admin [Suite:openshift/conformance/parallel]":                                                                                                                                                                        {},
		"[sig-operator] an end user can use OLM can subscribe to the operator [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                                           {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Pre-provisioned PV (ext4)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                              {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Pre-provisioned PV (block volmode)] volumes should store data [Suite:openshift/conformance/parallel] [Suite:k8s]":                                                            {},
		"[sig-storage] In-tree Volumes [Driver: azure-disk] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume [Suite:openshift/conformance/parallel] [Suite:k8s]":                                             {},
		"[sig-builds][Feature:Builds] oc new-app  should succeed with a --name of 58 characters [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":                                                                                         {},
		"promote-release-openshift-machine-os-content-e2e-aws-4.10-s390x.Overall":                                                                                                                                                                      {},
		"[sig-builds][Feature:Builds] build can reference a cluster service  with a build being created from new-build should be able to run a build that references a cluster service [Skipped:Disconnected] [Suite:openshift/conformance/parallel]":  {},
		"[sig-cli] oc adm policy [Suite:openshift/conformance/parallel]": {},
		"[sig-network][Feature:Network Policy Audit logging] when using openshift ovn-kubernetes should ensure acl logs are created and correct [Suite:openshift/conformance/parallel]": {},
	}
)
